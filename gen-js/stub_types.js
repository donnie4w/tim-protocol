//
// Autogenerated by Thrift Compiler (0.18.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


TimError = function(args) {
  this.code = null;
  this.info = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = args.info;
    }
  }
};
TimError.prototype = {};
TimError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimError.prototype.write = function(output) {
  output.writeStructBegin('TimError');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 2);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimAck = function(args) {
  this.ok = null;
  this.timType = null;
  this.error = null;
  this.t = null;
  this.n = null;
  this.t2 = null;
  this.n2 = null;
  if (args) {
    if (args.ok !== undefined && args.ok !== null) {
      this.ok = args.ok;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ok is unset!');
    }
    if (args.timType !== undefined && args.timType !== null) {
      this.timType = args.timType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timType is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.t !== undefined && args.t !== null) {
      this.t = args.t;
    }
    if (args.n !== undefined && args.n !== null) {
      this.n = args.n;
    }
    if (args.t2 !== undefined && args.t2 !== null) {
      this.t2 = args.t2;
    }
    if (args.n2 !== undefined && args.n2 !== null) {
      this.n2 = args.n2;
    }
  }
};
TimAck.prototype = {};
TimAck.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.ok = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.timType = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.t = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.n = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.t2 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.n2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimAck.prototype.write = function(output) {
  output.writeStructBegin('TimAck');
  if (this.ok !== null && this.ok !== undefined) {
    output.writeFieldBegin('ok', Thrift.Type.BOOL, 1);
    output.writeBool(this.ok);
    output.writeFieldEnd();
  }
  if (this.timType !== null && this.timType !== undefined) {
    output.writeFieldBegin('timType', Thrift.Type.BYTE, 2);
    output.writeByte(this.timType);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.t !== null && this.t !== undefined) {
    output.writeFieldBegin('t', Thrift.Type.I64, 4);
    output.writeI64(this.t);
    output.writeFieldEnd();
  }
  if (this.n !== null && this.n !== undefined) {
    output.writeFieldBegin('n', Thrift.Type.STRING, 5);
    output.writeString(this.n);
    output.writeFieldEnd();
  }
  if (this.t2 !== null && this.t2 !== undefined) {
    output.writeFieldBegin('t2', Thrift.Type.I64, 6);
    output.writeI64(this.t2);
    output.writeFieldEnd();
  }
  if (this.n2 !== null && this.n2 !== undefined) {
    output.writeFieldBegin('n2', Thrift.Type.STRING, 7);
    output.writeString(this.n2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimReq = function(args) {
  this.rtype = null;
  this.node = null;
  this.node2 = null;
  this.reqInt = null;
  this.reqInt2 = null;
  this.reqStr = null;
  this.reqStr2 = null;
  if (args) {
    if (args.rtype !== undefined && args.rtype !== null) {
      this.rtype = args.rtype;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = args.node;
    }
    if (args.node2 !== undefined && args.node2 !== null) {
      this.node2 = args.node2;
    }
    if (args.reqInt !== undefined && args.reqInt !== null) {
      this.reqInt = args.reqInt;
    }
    if (args.reqInt2 !== undefined && args.reqInt2 !== null) {
      this.reqInt2 = args.reqInt2;
    }
    if (args.reqStr !== undefined && args.reqStr !== null) {
      this.reqStr = args.reqStr;
    }
    if (args.reqStr2 !== undefined && args.reqStr2 !== null) {
      this.reqStr2 = args.reqStr2;
    }
  }
};
TimReq.prototype = {};
TimReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.rtype = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.node = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.node2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.reqInt = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.reqInt2 = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.reqStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.reqStr2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimReq.prototype.write = function(output) {
  output.writeStructBegin('TimReq');
  if (this.rtype !== null && this.rtype !== undefined) {
    output.writeFieldBegin('rtype', Thrift.Type.I32, 1);
    output.writeI32(this.rtype);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRING, 2);
    output.writeString(this.node);
    output.writeFieldEnd();
  }
  if (this.node2 !== null && this.node2 !== undefined) {
    output.writeFieldBegin('node2', Thrift.Type.STRING, 3);
    output.writeString(this.node2);
    output.writeFieldEnd();
  }
  if (this.reqInt !== null && this.reqInt !== undefined) {
    output.writeFieldBegin('reqInt', Thrift.Type.I64, 4);
    output.writeI64(this.reqInt);
    output.writeFieldEnd();
  }
  if (this.reqInt2 !== null && this.reqInt2 !== undefined) {
    output.writeFieldBegin('reqInt2', Thrift.Type.I64, 5);
    output.writeI64(this.reqInt2);
    output.writeFieldEnd();
  }
  if (this.reqStr !== null && this.reqStr !== undefined) {
    output.writeFieldBegin('reqStr', Thrift.Type.STRING, 6);
    output.writeString(this.reqStr);
    output.writeFieldEnd();
  }
  if (this.reqStr2 !== null && this.reqStr2 !== undefined) {
    output.writeFieldBegin('reqStr2', Thrift.Type.STRING, 7);
    output.writeString(this.reqStr2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tid = function(args) {
  this.node = null;
  this.domain = null;
  this.resource = null;
  this.termtyp = null;
  this.extend = null;
  if (args) {
    if (args.node !== undefined && args.node !== null) {
      this.node = args.node;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field node is unset!');
    }
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = args.resource;
    }
    if (args.termtyp !== undefined && args.termtyp !== null) {
      this.termtyp = args.termtyp;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = Thrift.copyMap(args.extend, [null]);
    }
  }
};
Tid.prototype = {};
Tid.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.node = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.termtyp = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.extend = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          if (_i2 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key3 = null;
          var val4 = null;
          key3 = input.readString().value;
          val4 = input.readString().value;
          this.extend[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tid.prototype.write = function(output) {
  output.writeStructBegin('Tid');
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRING, 1);
    output.writeString(this.node);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 2);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRING, 3);
    output.writeString(this.resource);
    output.writeFieldEnd();
  }
  if (this.termtyp !== null && this.termtyp !== undefined) {
    output.writeFieldBegin('termtyp', Thrift.Type.BYTE, 4);
    output.writeByte(this.termtyp);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extend));
    for (var kiter5 in this.extend) {
      if (this.extend.hasOwnProperty(kiter5)) {
        var viter6 = this.extend[kiter5];
        output.writeString(kiter5);
        output.writeString(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimUserBean = function(args) {
  this.name = null;
  this.nickName = null;
  this.brithday = null;
  this.gender = null;
  this.cover = null;
  this.area = null;
  this.createtime = null;
  this.photoTidAlbum = null;
  this.extend = null;
  this.extra = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.nickName !== undefined && args.nickName !== null) {
      this.nickName = args.nickName;
    }
    if (args.brithday !== undefined && args.brithday !== null) {
      this.brithday = args.brithday;
    }
    if (args.gender !== undefined && args.gender !== null) {
      this.gender = args.gender;
    }
    if (args.cover !== undefined && args.cover !== null) {
      this.cover = args.cover;
    }
    if (args.area !== undefined && args.area !== null) {
      this.area = args.area;
    }
    if (args.createtime !== undefined && args.createtime !== null) {
      this.createtime = args.createtime;
    }
    if (args.photoTidAlbum !== undefined && args.photoTidAlbum !== null) {
      this.photoTidAlbum = Thrift.copyList(args.photoTidAlbum, [null]);
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = Thrift.copyMap(args.extend, [null]);
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
TimUserBean.prototype = {};
TimUserBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.brithday = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.gender = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.cover = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.area = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.createtime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.photoTidAlbum = [];
        var _rtmp38 = input.readListBegin();
        var _size7 = _rtmp38.size || 0;
        for (var _i9 = 0; _i9 < _size7; ++_i9) {
          var elem10 = null;
          elem10 = input.readString().value;
          this.photoTidAlbum.push(elem10);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.extend = {};
        var _rtmp312 = input.readMapBegin();
        var _size11 = _rtmp312.size || 0;
        for (var _i13 = 0; _i13 < _size11; ++_i13) {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readString().value;
          this.extend[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        this.extra = {};
        var _rtmp317 = input.readMapBegin();
        var _size16 = _rtmp317.size || 0;
        for (var _i18 = 0; _i18 < _size16; ++_i18) {
          if (_i18 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key19 = null;
          var val20 = null;
          key19 = input.readString().value;
          val20 = input.readBinary().value;
          this.extra[key19] = val20;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimUserBean.prototype.write = function(output) {
  output.writeStructBegin('TimUserBean');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 2);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.brithday !== null && this.brithday !== undefined) {
    output.writeFieldBegin('brithday', Thrift.Type.STRING, 4);
    output.writeString(this.brithday);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.BYTE, 5);
    output.writeByte(this.gender);
    output.writeFieldEnd();
  }
  if (this.cover !== null && this.cover !== undefined) {
    output.writeFieldBegin('cover', Thrift.Type.STRING, 6);
    output.writeString(this.cover);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRING, 7);
    output.writeString(this.area);
    output.writeFieldEnd();
  }
  if (this.createtime !== null && this.createtime !== undefined) {
    output.writeFieldBegin('createtime', Thrift.Type.I64, 8);
    output.writeI64(this.createtime);
    output.writeFieldEnd();
  }
  if (this.photoTidAlbum !== null && this.photoTidAlbum !== undefined) {
    output.writeFieldBegin('photoTidAlbum', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.photoTidAlbum.length);
    for (var iter21 in this.photoTidAlbum) {
      if (this.photoTidAlbum.hasOwnProperty(iter21)) {
        iter21 = this.photoTidAlbum[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extend));
    for (var kiter22 in this.extend) {
      if (this.extend.hasOwnProperty(kiter22)) {
        var viter23 = this.extend[kiter22];
        output.writeString(kiter22);
        output.writeString(viter23);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter24 in this.extra) {
      if (this.extra.hasOwnProperty(kiter24)) {
        var viter25 = this.extra[kiter24];
        output.writeString(kiter24);
        output.writeBinary(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRoomBean = function(args) {
  this.founder = null;
  this.managers = null;
  this.cover = null;
  this.topic = null;
  this.label = null;
  this.gtype = null;
  this.kind = null;
  this.createtime = null;
  this.extend = null;
  this.extra = null;
  if (args) {
    if (args.founder !== undefined && args.founder !== null) {
      this.founder = args.founder;
    }
    if (args.managers !== undefined && args.managers !== null) {
      this.managers = Thrift.copyList(args.managers, [null]);
    }
    if (args.cover !== undefined && args.cover !== null) {
      this.cover = args.cover;
    }
    if (args.topic !== undefined && args.topic !== null) {
      this.topic = args.topic;
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.gtype !== undefined && args.gtype !== null) {
      this.gtype = args.gtype;
    }
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    }
    if (args.createtime !== undefined && args.createtime !== null) {
      this.createtime = args.createtime;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = Thrift.copyMap(args.extend, [null]);
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
TimRoomBean.prototype = {};
TimRoomBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.founder = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.managers = [];
        var _rtmp327 = input.readListBegin();
        var _size26 = _rtmp327.size || 0;
        for (var _i28 = 0; _i28 < _size26; ++_i28) {
          var elem29 = null;
          elem29 = input.readString().value;
          this.managers.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cover = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.topic = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.gtype = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.kind = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.createtime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.extend = {};
        var _rtmp331 = input.readMapBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          if (_i32 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key33 = null;
          var val34 = null;
          key33 = input.readString().value;
          val34 = input.readString().value;
          this.extend[key33] = val34;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.extra = {};
        var _rtmp336 = input.readMapBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          if (_i37 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key38 = null;
          var val39 = null;
          key38 = input.readString().value;
          val39 = input.readBinary().value;
          this.extra[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRoomBean.prototype.write = function(output) {
  output.writeStructBegin('TimRoomBean');
  if (this.founder !== null && this.founder !== undefined) {
    output.writeFieldBegin('founder', Thrift.Type.STRING, 1);
    output.writeString(this.founder);
    output.writeFieldEnd();
  }
  if (this.managers !== null && this.managers !== undefined) {
    output.writeFieldBegin('managers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.managers.length);
    for (var iter40 in this.managers) {
      if (this.managers.hasOwnProperty(iter40)) {
        iter40 = this.managers[iter40];
        output.writeString(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cover !== null && this.cover !== undefined) {
    output.writeFieldBegin('cover', Thrift.Type.STRING, 3);
    output.writeString(this.cover);
    output.writeFieldEnd();
  }
  if (this.topic !== null && this.topic !== undefined) {
    output.writeFieldBegin('topic', Thrift.Type.STRING, 4);
    output.writeString(this.topic);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 5);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.gtype !== null && this.gtype !== undefined) {
    output.writeFieldBegin('gtype', Thrift.Type.BYTE, 6);
    output.writeByte(this.gtype);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I64, 7);
    output.writeI64(this.kind);
    output.writeFieldEnd();
  }
  if (this.createtime !== null && this.createtime !== undefined) {
    output.writeFieldBegin('createtime', Thrift.Type.I64, 8);
    output.writeI64(this.createtime);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extend));
    for (var kiter41 in this.extend) {
      if (this.extend.hasOwnProperty(kiter41)) {
        var viter42 = this.extend[kiter41];
        output.writeString(kiter41);
        output.writeString(viter42);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter43 in this.extra) {
      if (this.extra.hasOwnProperty(kiter43)) {
        var viter44 = this.extra[kiter43];
        output.writeString(kiter43);
        output.writeBinary(viter44);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimAuth = function(args) {
  this.name = null;
  this.pwd = null;
  this.domain = null;
  this.resource = null;
  this.termtyp = null;
  this.token = null;
  this.extend = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = args.resource;
    }
    if (args.termtyp !== undefined && args.termtyp !== null) {
      this.termtyp = args.termtyp;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = Thrift.copyMap(args.extend, [null]);
    }
  }
};
TimAuth.prototype = {};
TimAuth.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.resource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.termtyp = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.token = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.extend = {};
        var _rtmp346 = input.readMapBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          if (_i47 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key48 = null;
          var val49 = null;
          key48 = input.readString().value;
          val49 = input.readString().value;
          this.extend[key48] = val49;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimAuth.prototype.write = function(output) {
  output.writeStructBegin('TimAuth');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 2);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 3);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRING, 4);
    output.writeString(this.resource);
    output.writeFieldEnd();
  }
  if (this.termtyp !== null && this.termtyp !== undefined) {
    output.writeFieldBegin('termtyp', Thrift.Type.BYTE, 5);
    output.writeByte(this.termtyp);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.I64, 6);
    output.writeI64(this.token);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extend));
    for (var kiter50 in this.extend) {
      if (this.extend.hasOwnProperty(kiter50)) {
        var viter51 = this.extend[kiter50];
        output.writeString(kiter50);
        output.writeString(viter51);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPresence = function(args) {
  this.id = null;
  this.offline = null;
  this.subStatus = null;
  this.fromTid = null;
  this.toTid = null;
  this.toList = null;
  this.show = null;
  this.status = null;
  this.extend = null;
  this.extra = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.offline !== undefined && args.offline !== null) {
      this.offline = args.offline;
    }
    if (args.subStatus !== undefined && args.subStatus !== null) {
      this.subStatus = args.subStatus;
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.toList !== undefined && args.toList !== null) {
      this.toList = Thrift.copyList(args.toList, [null]);
    }
    if (args.show !== undefined && args.show !== null) {
      this.show = args.show;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = Thrift.copyMap(args.extend, [null]);
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
TimPresence.prototype = {};
TimPresence.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.offline = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.subStatus = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.toList = [];
        var _rtmp353 = input.readListBegin();
        var _size52 = _rtmp353.size || 0;
        for (var _i54 = 0; _i54 < _size52; ++_i54) {
          var elem55 = null;
          elem55 = input.readString().value;
          this.toList.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.show = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        this.extend = {};
        var _rtmp357 = input.readMapBegin();
        var _size56 = _rtmp357.size || 0;
        for (var _i58 = 0; _i58 < _size56; ++_i58) {
          if (_i58 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key59 = null;
          var val60 = null;
          key59 = input.readString().value;
          val60 = input.readString().value;
          this.extend[key59] = val60;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.extra = {};
        var _rtmp362 = input.readMapBegin();
        var _size61 = _rtmp362.size || 0;
        for (var _i63 = 0; _i63 < _size61; ++_i63) {
          if (_i63 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key64 = null;
          var val65 = null;
          key64 = input.readString().value;
          val65 = input.readBinary().value;
          this.extra[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPresence.prototype.write = function(output) {
  output.writeStructBegin('TimPresence');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.offline !== null && this.offline !== undefined) {
    output.writeFieldBegin('offline', Thrift.Type.BOOL, 2);
    output.writeBool(this.offline);
    output.writeFieldEnd();
  }
  if (this.subStatus !== null && this.subStatus !== undefined) {
    output.writeFieldBegin('subStatus', Thrift.Type.BYTE, 3);
    output.writeByte(this.subStatus);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 4);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 5);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toList !== null && this.toList !== undefined) {
    output.writeFieldBegin('toList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.toList.length);
    for (var iter66 in this.toList) {
      if (this.toList.hasOwnProperty(iter66)) {
        iter66 = this.toList[iter66];
        output.writeString(iter66);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.show !== null && this.show !== undefined) {
    output.writeFieldBegin('show', Thrift.Type.I16, 7);
    output.writeI16(this.show);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 8);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extend));
    for (var kiter67 in this.extend) {
      if (this.extend.hasOwnProperty(kiter67)) {
        var viter68 = this.extend[kiter67];
        output.writeString(kiter67);
        output.writeString(viter68);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter69 in this.extra) {
      if (this.extra.hasOwnProperty(kiter69)) {
        var viter70 = this.extra[kiter69];
        output.writeString(kiter69);
        output.writeBinary(viter70);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMessage = function(args) {
  this.msType = null;
  this.odType = null;
  this.id = null;
  this.mid = null;
  this.bnType = null;
  this.fromTid = null;
  this.toTid = null;
  this.roomTid = null;
  this.dataBinary = null;
  this.dataString = null;
  this.isOffline = null;
  this.timestamp = null;
  this.udtype = null;
  this.udshow = null;
  this.extend = null;
  this.extra = null;
  if (args) {
    if (args.msType !== undefined && args.msType !== null) {
      this.msType = args.msType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field msType is unset!');
    }
    if (args.odType !== undefined && args.odType !== null) {
      this.odType = args.odType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field odType is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.bnType !== undefined && args.bnType !== null) {
      this.bnType = args.bnType;
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.roomTid !== undefined && args.roomTid !== null) {
      this.roomTid = new Tid(args.roomTid);
    }
    if (args.dataBinary !== undefined && args.dataBinary !== null) {
      this.dataBinary = args.dataBinary;
    }
    if (args.dataString !== undefined && args.dataString !== null) {
      this.dataString = args.dataString;
    }
    if (args.isOffline !== undefined && args.isOffline !== null) {
      this.isOffline = args.isOffline;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.udtype !== undefined && args.udtype !== null) {
      this.udtype = args.udtype;
    }
    if (args.udshow !== undefined && args.udshow !== null) {
      this.udshow = args.udshow;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = Thrift.copyMap(args.extend, [null]);
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
TimMessage.prototype = {};
TimMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.msType = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.odType = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mid = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bnType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.roomTid = new Tid();
        this.roomTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.dataBinary = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.dataString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.isOffline = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I16) {
        this.udtype = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I16) {
        this.udshow = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.MAP) {
        this.extend = {};
        var _rtmp372 = input.readMapBegin();
        var _size71 = _rtmp372.size || 0;
        for (var _i73 = 0; _i73 < _size71; ++_i73) {
          if (_i73 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key74 = null;
          var val75 = null;
          key74 = input.readString().value;
          val75 = input.readString().value;
          this.extend[key74] = val75;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.MAP) {
        this.extra = {};
        var _rtmp377 = input.readMapBegin();
        var _size76 = _rtmp377.size || 0;
        for (var _i78 = 0; _i78 < _size76; ++_i78) {
          if (_i78 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key79 = null;
          var val80 = null;
          key79 = input.readString().value;
          val80 = input.readBinary().value;
          this.extra[key79] = val80;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMessage.prototype.write = function(output) {
  output.writeStructBegin('TimMessage');
  if (this.msType !== null && this.msType !== undefined) {
    output.writeFieldBegin('msType', Thrift.Type.BYTE, 1);
    output.writeByte(this.msType);
    output.writeFieldEnd();
  }
  if (this.odType !== null && this.odType !== undefined) {
    output.writeFieldBegin('odType', Thrift.Type.BYTE, 2);
    output.writeByte(this.odType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.I64, 4);
    output.writeI64(this.mid);
    output.writeFieldEnd();
  }
  if (this.bnType !== null && this.bnType !== undefined) {
    output.writeFieldBegin('bnType', Thrift.Type.I32, 5);
    output.writeI32(this.bnType);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 6);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 7);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.roomTid !== null && this.roomTid !== undefined) {
    output.writeFieldBegin('roomTid', Thrift.Type.STRUCT, 8);
    this.roomTid.write(output);
    output.writeFieldEnd();
  }
  if (this.dataBinary !== null && this.dataBinary !== undefined) {
    output.writeFieldBegin('dataBinary', Thrift.Type.STRING, 9);
    output.writeBinary(this.dataBinary);
    output.writeFieldEnd();
  }
  if (this.dataString !== null && this.dataString !== undefined) {
    output.writeFieldBegin('dataString', Thrift.Type.STRING, 10);
    output.writeString(this.dataString);
    output.writeFieldEnd();
  }
  if (this.isOffline !== null && this.isOffline !== undefined) {
    output.writeFieldBegin('isOffline', Thrift.Type.BOOL, 11);
    output.writeBool(this.isOffline);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 12);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.udtype !== null && this.udtype !== undefined) {
    output.writeFieldBegin('udtype', Thrift.Type.I16, 13);
    output.writeI16(this.udtype);
    output.writeFieldEnd();
  }
  if (this.udshow !== null && this.udshow !== undefined) {
    output.writeFieldBegin('udshow', Thrift.Type.I16, 14);
    output.writeI16(this.udshow);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.MAP, 15);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extend));
    for (var kiter81 in this.extend) {
      if (this.extend.hasOwnProperty(kiter81)) {
        var viter82 = this.extend[kiter81];
        output.writeString(kiter81);
        output.writeString(viter82);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 16);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter83 in this.extra) {
      if (this.extra.hasOwnProperty(kiter83)) {
        var viter84 = this.extra[kiter83];
        output.writeString(kiter83);
        output.writeBinary(viter84);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimStream = function(args) {
  this.id = null;
  this.VNode = null;
  this.dtype = null;
  this.body = null;
  this.fromNode = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.VNode !== undefined && args.VNode !== null) {
      this.VNode = args.VNode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field VNode is unset!');
    }
    if (args.dtype !== undefined && args.dtype !== null) {
      this.dtype = args.dtype;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.fromNode !== undefined && args.fromNode !== null) {
      this.fromNode = args.fromNode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fromNode is unset!');
    }
  }
};
TimStream.prototype = {};
TimStream.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.VNode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.dtype = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fromNode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimStream.prototype.write = function(output) {
  output.writeStructBegin('TimStream');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.VNode !== null && this.VNode !== undefined) {
    output.writeFieldBegin('VNode', Thrift.Type.STRING, 2);
    output.writeString(this.VNode);
    output.writeFieldEnd();
  }
  if (this.dtype !== null && this.dtype !== undefined) {
    output.writeFieldBegin('dtype', Thrift.Type.BYTE, 3);
    output.writeByte(this.dtype);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 4);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  if (this.fromNode !== null && this.fromNode !== undefined) {
    output.writeFieldBegin('fromNode', Thrift.Type.STRING, 5);
    output.writeString(this.fromNode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimNodes = function(args) {
  this.ntype = null;
  this.nodelist = null;
  this.usermap = null;
  this.roommap = null;
  this.node = null;
  if (args) {
    if (args.ntype !== undefined && args.ntype !== null) {
      this.ntype = args.ntype;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ntype is unset!');
    }
    if (args.nodelist !== undefined && args.nodelist !== null) {
      this.nodelist = Thrift.copyList(args.nodelist, [null]);
    }
    if (args.usermap !== undefined && args.usermap !== null) {
      this.usermap = Thrift.copyMap(args.usermap, [TimUserBean]);
    }
    if (args.roommap !== undefined && args.roommap !== null) {
      this.roommap = Thrift.copyMap(args.roommap, [TimRoomBean]);
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = args.node;
    }
  }
};
TimNodes.prototype = {};
TimNodes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ntype = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.nodelist = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readString().value;
          this.nodelist.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.usermap = {};
        var _rtmp390 = input.readMapBegin();
        var _size89 = _rtmp390.size || 0;
        for (var _i91 = 0; _i91 < _size89; ++_i91) {
          if (_i91 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key92 = null;
          var val93 = null;
          key92 = input.readString().value;
          val93 = new TimUserBean();
          val93.read(input);
          this.usermap[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.roommap = {};
        var _rtmp395 = input.readMapBegin();
        var _size94 = _rtmp395.size || 0;
        for (var _i96 = 0; _i96 < _size94; ++_i96) {
          if (_i96 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key97 = null;
          var val98 = null;
          key97 = input.readString().value;
          val98 = new TimRoomBean();
          val98.read(input);
          this.roommap[key97] = val98;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.node = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimNodes.prototype.write = function(output) {
  output.writeStructBegin('TimNodes');
  if (this.ntype !== null && this.ntype !== undefined) {
    output.writeFieldBegin('ntype', Thrift.Type.I32, 1);
    output.writeI32(this.ntype);
    output.writeFieldEnd();
  }
  if (this.nodelist !== null && this.nodelist !== undefined) {
    output.writeFieldBegin('nodelist', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.nodelist.length);
    for (var iter99 in this.nodelist) {
      if (this.nodelist.hasOwnProperty(iter99)) {
        iter99 = this.nodelist[iter99];
        output.writeString(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.usermap !== null && this.usermap !== undefined) {
    output.writeFieldBegin('usermap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.usermap));
    for (var kiter100 in this.usermap) {
      if (this.usermap.hasOwnProperty(kiter100)) {
        var viter101 = this.usermap[kiter100];
        output.writeString(kiter100);
        viter101.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.roommap !== null && this.roommap !== undefined) {
    output.writeFieldBegin('roommap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.roommap));
    for (var kiter102 in this.roommap) {
      if (this.roommap.hasOwnProperty(kiter102)) {
        var viter103 = this.roommap[kiter102];
        output.writeString(kiter102);
        viter103.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.STRING, 5);
    output.writeString(this.node);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMessageList = function(args) {
  this.id = null;
  this.messageList = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.messageList !== undefined && args.messageList !== null) {
      this.messageList = Thrift.copyList(args.messageList, [TimMessage]);
    }
  }
};
TimMessageList.prototype = {};
TimMessageList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.messageList = [];
        var _rtmp3105 = input.readListBegin();
        var _size104 = _rtmp3105.size || 0;
        for (var _i106 = 0; _i106 < _size104; ++_i106) {
          var elem107 = null;
          elem107 = new TimMessage();
          elem107.read(input);
          this.messageList.push(elem107);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMessageList.prototype.write = function(output) {
  output.writeStructBegin('TimMessageList');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.messageList !== null && this.messageList !== undefined) {
    output.writeFieldBegin('messageList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageList.length);
    for (var iter108 in this.messageList) {
      if (this.messageList.hasOwnProperty(iter108)) {
        iter108 = this.messageList[iter108];
        iter108.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

