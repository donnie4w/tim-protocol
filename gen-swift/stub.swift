/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public final class TimError {

  public var code: Int32?

  public var info: String?


  public init() { }
  public init(code: Int32?, info: String?) {
    self.code = code
    self.info = info
  }

}

public final class TimAck {

  public var ok: Bool

  public var timType: Int8

  public var error: TimError?

  public var t: Int64?

  public var n: String?


  public init(ok: Bool, timType: Int8) {
    self.ok = ok
    self.timType = timType
  }

  public init(ok: Bool, timType: Int8, error: TimError?, t: Int64?, n: String?) {
    self.ok = ok
    self.timType = timType
    self.error = error
    self.t = t
    self.n = n
  }

}

public final class TimReq {

  public var rtype: Int32?

  public var node: String?

  public var node2: String?

  public var reqInt: Int64?

  public var reqInt2: Int64?

  public var reqStr: String?

  public var reqStr2: String?


  public init() { }
  public init(rtype: Int32?, node: String?, node2: String?, reqInt: Int64?, reqInt2: Int64?, reqStr: String?, reqStr2: String?) {
    self.rtype = rtype
    self.node = node
    self.node2 = node2
    self.reqInt = reqInt
    self.reqInt2 = reqInt2
    self.reqStr = reqStr
    self.reqStr2 = reqStr2
  }

}

public final class Tid {

  public var node: String

  public var domain: String?

  public var resource: String?

  public var termtyp: Int8?

  public var extend: TMap<String, String>?


  public init(node: String) {
    self.node = node
  }

  public init(node: String, domain: String?, resource: String?, termtyp: Int8?, extend: TMap<String, String>?) {
    self.node = node
    self.domain = domain
    self.resource = resource
    self.termtyp = termtyp
    self.extend = extend
  }

}

public final class TimUserBean {

  public var name: String?

  public var nickName: String?

  public var brithday: String?

  public var gender: Int8?

  public var cover: String?

  public var area: String?

  public var createtime: Int64?

  public var photoTidAlbum: TList<String>?

  public var extend: TMap<String, String>?

  public var extra: TMap<String, Data>?


  public init() { }
  public init(name: String?, nickName: String?, brithday: String?, gender: Int8?, cover: String?, area: String?, createtime: Int64?, photoTidAlbum: TList<String>?, extend: TMap<String, String>?, extra: TMap<String, Data>?) {
    self.name = name
    self.nickName = nickName
    self.brithday = brithday
    self.gender = gender
    self.cover = cover
    self.area = area
    self.createtime = createtime
    self.photoTidAlbum = photoTidAlbum
    self.extend = extend
    self.extra = extra
  }

}

public final class TimRoomBean {

  public var founder: String?

  public var managers: TList<String>?

  public var cover: String?

  public var topic: String?

  public var label: String?

  public var gtype: Int8?

  public var createtime: Int64?

  public var extend: TMap<String, String>?

  public var extra: TMap<String, Data>?


  public init() { }
  public init(founder: String?, managers: TList<String>?, cover: String?, topic: String?, label: String?, gtype: Int8?, createtime: Int64?, extend: TMap<String, String>?, extra: TMap<String, Data>?) {
    self.founder = founder
    self.managers = managers
    self.cover = cover
    self.topic = topic
    self.label = label
    self.gtype = gtype
    self.createtime = createtime
    self.extend = extend
    self.extra = extra
  }

}

public final class TimAuth {

  public var name: String?

  public var pwd: String?

  public var domain: String?

  public var resource: String?

  public var termtyp: Int8?

  public var token: Int64?

  public var extend: TMap<String, String>?


  public init() { }
  public init(name: String?, pwd: String?, domain: String?, resource: String?, termtyp: Int8?, token: Int64?, extend: TMap<String, String>?) {
    self.name = name
    self.pwd = pwd
    self.domain = domain
    self.resource = resource
    self.termtyp = termtyp
    self.token = token
    self.extend = extend
  }

}

public final class TimPresence {

  public var id: Int64?

  public var offline: Bool?

  public var subStatus: Int8?

  public var fromTid: Tid?

  public var toTid: Tid?

  public var toList: TList<String>?

  public var show: Int16?

  public var status: String?

  public var extend: TMap<String, String>?

  public var extra: TMap<String, Data>?


  public init() { }
  public init(id: Int64?, offline: Bool?, subStatus: Int8?, fromTid: Tid?, toTid: Tid?, toList: TList<String>?, show: Int16?, status: String?, extend: TMap<String, String>?, extra: TMap<String, Data>?) {
    self.id = id
    self.offline = offline
    self.subStatus = subStatus
    self.fromTid = fromTid
    self.toTid = toTid
    self.toList = toList
    self.show = show
    self.status = status
    self.extend = extend
    self.extra = extra
  }

}

public final class TimMessage {

  public var msType: Int8

  public var odType: Int8

  public var id: Int64?

  public var mid: Int64?

  public var bnType: Int32?

  public var fromTid: Tid?

  public var toTid: Tid?

  public var roomTid: Tid?

  public var dataBinary: Data?

  public var dataString: String?

  public var isOffline: Bool?

  public var timestamp: Int64?

  public var udtype: Int16?

  public var udshow: Int16?

  public var extend: TMap<String, String>?

  public var extra: TMap<String, Data>?


  public init(msType: Int8, odType: Int8) {
    self.msType = msType
    self.odType = odType
  }

  public init(msType: Int8, odType: Int8, id: Int64?, mid: Int64?, bnType: Int32?, fromTid: Tid?, toTid: Tid?, roomTid: Tid?, dataBinary: Data?, dataString: String?, isOffline: Bool?, timestamp: Int64?, udtype: Int16?, udshow: Int16?, extend: TMap<String, String>?, extra: TMap<String, Data>?) {
    self.msType = msType
    self.odType = odType
    self.id = id
    self.mid = mid
    self.bnType = bnType
    self.fromTid = fromTid
    self.toTid = toTid
    self.roomTid = roomTid
    self.dataBinary = dataBinary
    self.dataString = dataString
    self.isOffline = isOffline
    self.timestamp = timestamp
    self.udtype = udtype
    self.udshow = udshow
    self.extend = extend
    self.extra = extra
  }

}

public final class TimStream {

  public var id: Int64

  public var VNode: String

  public var dtype: Int8?

  public var body: Data?

  public var fromNode: String


  public init(id: Int64, VNode: String, fromNode: String) {
    self.id = id
    self.VNode = VNode
    self.fromNode = fromNode
  }

  public init(id: Int64, VNode: String, dtype: Int8?, body: Data?, fromNode: String) {
    self.id = id
    self.VNode = VNode
    self.dtype = dtype
    self.body = body
    self.fromNode = fromNode
  }

}

public final class TimNodes {

  public var ntype: Int32

  public var nodelist: TList<String>?

  public var usermap: TMap<String, TimUserBean>?

  public var roommap: TMap<String, TimRoomBean>?

  public var node: String?


  public init(ntype: Int32) {
    self.ntype = ntype
  }

  public init(ntype: Int32, nodelist: TList<String>?, usermap: TMap<String, TimUserBean>?, roommap: TMap<String, TimRoomBean>?, node: String?) {
    self.ntype = ntype
    self.nodelist = nodelist
    self.usermap = usermap
    self.roommap = roommap
    self.node = node
  }

}

public final class TimMessageList {

  public var id: Int64?

  public var messageList: TList<TimMessage>?


  public init() { }
  public init(id: Int64?, messageList: TList<TimMessage>?) {
    self.id = id
    self.messageList = messageList
  }

}


