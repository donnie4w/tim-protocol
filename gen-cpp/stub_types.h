/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stub_TYPES_H
#define stub_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class TimError;

class TimAck;

class TimReq;

class Tid;

class TimUserBean;

class TimRoomBean;

class TimAuth;

class TimPresence;

class TimMessage;

class TimStream;

class TimNodes;

class TimMessageList;

typedef struct _TimError__isset {
  _TimError__isset() : code(false), info(false) {}
  bool code :1;
  bool info :1;
} _TimError__isset;

class TimError : public virtual ::apache::thrift::TBase {
 public:

  TimError(const TimError&);
  TimError& operator=(const TimError&);
  TimError() noexcept
           : code(0),
             info() {
  }

  virtual ~TimError() noexcept;
  int32_t code;
  std::string info;

  _TimError__isset __isset;

  void __set_code(const int32_t val);

  void __set_info(const std::string& val);

  bool operator == (const TimError & rhs) const
  {
    if (__isset.code != rhs.__isset.code)
      return false;
    else if (__isset.code && !(code == rhs.code))
      return false;
    if (__isset.info != rhs.__isset.info)
      return false;
    else if (__isset.info && !(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const TimError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimError &a, TimError &b);

std::ostream& operator<<(std::ostream& out, const TimError& obj);

typedef struct _TimAck__isset {
  _TimAck__isset() : error(false), t(false), n(false), t2(false), n2(false) {}
  bool error :1;
  bool t :1;
  bool n :1;
  bool t2 :1;
  bool n2 :1;
} _TimAck__isset;

class TimAck : public virtual ::apache::thrift::TBase {
 public:

  TimAck(const TimAck&);
  TimAck& operator=(const TimAck&);
  TimAck() noexcept
         : ok(0),
           timType(0),
           t(0),
           n(),
           t2(0),
           n2() {
  }

  virtual ~TimAck() noexcept;
  bool ok;
  int8_t timType;
  TimError error;
  int64_t t;
  std::string n;
  int64_t t2;
  std::string n2;

  _TimAck__isset __isset;

  void __set_ok(const bool val);

  void __set_timType(const int8_t val);

  void __set_error(const TimError& val);

  void __set_t(const int64_t val);

  void __set_n(const std::string& val);

  void __set_t2(const int64_t val);

  void __set_n2(const std::string& val);

  bool operator == (const TimAck & rhs) const
  {
    if (!(ok == rhs.ok))
      return false;
    if (!(timType == rhs.timType))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.t != rhs.__isset.t)
      return false;
    else if (__isset.t && !(t == rhs.t))
      return false;
    if (__isset.n != rhs.__isset.n)
      return false;
    else if (__isset.n && !(n == rhs.n))
      return false;
    if (__isset.t2 != rhs.__isset.t2)
      return false;
    else if (__isset.t2 && !(t2 == rhs.t2))
      return false;
    if (__isset.n2 != rhs.__isset.n2)
      return false;
    else if (__isset.n2 && !(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const TimAck &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimAck & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimAck &a, TimAck &b);

std::ostream& operator<<(std::ostream& out, const TimAck& obj);

typedef struct _TimReq__isset {
  _TimReq__isset() : rtype(false), node(false), node2(false), reqInt(false), reqInt2(false), reqStr(false), reqStr2(false) {}
  bool rtype :1;
  bool node :1;
  bool node2 :1;
  bool reqInt :1;
  bool reqInt2 :1;
  bool reqStr :1;
  bool reqStr2 :1;
} _TimReq__isset;

class TimReq : public virtual ::apache::thrift::TBase {
 public:

  TimReq(const TimReq&);
  TimReq& operator=(const TimReq&);
  TimReq() noexcept
         : rtype(0),
           node(),
           node2(),
           reqInt(0),
           reqInt2(0),
           reqStr(),
           reqStr2() {
  }

  virtual ~TimReq() noexcept;
  int32_t rtype;
  std::string node;
  std::string node2;
  int64_t reqInt;
  int64_t reqInt2;
  std::string reqStr;
  std::string reqStr2;

  _TimReq__isset __isset;

  void __set_rtype(const int32_t val);

  void __set_node(const std::string& val);

  void __set_node2(const std::string& val);

  void __set_reqInt(const int64_t val);

  void __set_reqInt2(const int64_t val);

  void __set_reqStr(const std::string& val);

  void __set_reqStr2(const std::string& val);

  bool operator == (const TimReq & rhs) const
  {
    if (__isset.rtype != rhs.__isset.rtype)
      return false;
    else if (__isset.rtype && !(rtype == rhs.rtype))
      return false;
    if (__isset.node != rhs.__isset.node)
      return false;
    else if (__isset.node && !(node == rhs.node))
      return false;
    if (__isset.node2 != rhs.__isset.node2)
      return false;
    else if (__isset.node2 && !(node2 == rhs.node2))
      return false;
    if (__isset.reqInt != rhs.__isset.reqInt)
      return false;
    else if (__isset.reqInt && !(reqInt == rhs.reqInt))
      return false;
    if (__isset.reqInt2 != rhs.__isset.reqInt2)
      return false;
    else if (__isset.reqInt2 && !(reqInt2 == rhs.reqInt2))
      return false;
    if (__isset.reqStr != rhs.__isset.reqStr)
      return false;
    else if (__isset.reqStr && !(reqStr == rhs.reqStr))
      return false;
    if (__isset.reqStr2 != rhs.__isset.reqStr2)
      return false;
    else if (__isset.reqStr2 && !(reqStr2 == rhs.reqStr2))
      return false;
    return true;
  }
  bool operator != (const TimReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimReq &a, TimReq &b);

std::ostream& operator<<(std::ostream& out, const TimReq& obj);

typedef struct _Tid__isset {
  _Tid__isset() : domain(false), resource(false), termtyp(false), extend(false) {}
  bool domain :1;
  bool resource :1;
  bool termtyp :1;
  bool extend :1;
} _Tid__isset;

class Tid : public virtual ::apache::thrift::TBase {
 public:

  Tid(const Tid&);
  Tid& operator=(const Tid&);
  Tid() noexcept
      : node(),
        domain(),
        resource(),
        termtyp(0) {
  }

  virtual ~Tid() noexcept;
  std::string node;
  std::string domain;
  std::string resource;
  int8_t termtyp;
  std::map<std::string, std::string>  extend;

  _Tid__isset __isset;

  void __set_node(const std::string& val);

  void __set_domain(const std::string& val);

  void __set_resource(const std::string& val);

  void __set_termtyp(const int8_t val);

  void __set_extend(const std::map<std::string, std::string> & val);

  bool operator == (const Tid & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    if (__isset.domain != rhs.__isset.domain)
      return false;
    else if (__isset.domain && !(domain == rhs.domain))
      return false;
    if (__isset.resource != rhs.__isset.resource)
      return false;
    else if (__isset.resource && !(resource == rhs.resource))
      return false;
    if (__isset.termtyp != rhs.__isset.termtyp)
      return false;
    else if (__isset.termtyp && !(termtyp == rhs.termtyp))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const Tid &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tid & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tid &a, Tid &b);

std::ostream& operator<<(std::ostream& out, const Tid& obj);

typedef struct _TimUserBean__isset {
  _TimUserBean__isset() : name(false), nickName(false), brithday(false), gender(false), cover(false), area(false), createtime(false), photoTidAlbum(false), extend(false), extra(false) {}
  bool name :1;
  bool nickName :1;
  bool brithday :1;
  bool gender :1;
  bool cover :1;
  bool area :1;
  bool createtime :1;
  bool photoTidAlbum :1;
  bool extend :1;
  bool extra :1;
} _TimUserBean__isset;

class TimUserBean : public virtual ::apache::thrift::TBase {
 public:

  TimUserBean(const TimUserBean&);
  TimUserBean& operator=(const TimUserBean&);
  TimUserBean() noexcept
              : name(),
                nickName(),
                brithday(),
                gender(0),
                cover(),
                area(),
                createtime(0) {
  }

  virtual ~TimUserBean() noexcept;
  std::string name;
  std::string nickName;
  std::string brithday;
  int8_t gender;
  std::string cover;
  std::string area;
  int64_t createtime;
  std::vector<std::string>  photoTidAlbum;
  std::map<std::string, std::string>  extend;
  std::map<std::string, std::string>  extra;

  _TimUserBean__isset __isset;

  void __set_name(const std::string& val);

  void __set_nickName(const std::string& val);

  void __set_brithday(const std::string& val);

  void __set_gender(const int8_t val);

  void __set_cover(const std::string& val);

  void __set_area(const std::string& val);

  void __set_createtime(const int64_t val);

  void __set_photoTidAlbum(const std::vector<std::string> & val);

  void __set_extend(const std::map<std::string, std::string> & val);

  void __set_extra(const std::map<std::string, std::string> & val);

  bool operator == (const TimUserBean & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.nickName != rhs.__isset.nickName)
      return false;
    else if (__isset.nickName && !(nickName == rhs.nickName))
      return false;
    if (__isset.brithday != rhs.__isset.brithday)
      return false;
    else if (__isset.brithday && !(brithday == rhs.brithday))
      return false;
    if (__isset.gender != rhs.__isset.gender)
      return false;
    else if (__isset.gender && !(gender == rhs.gender))
      return false;
    if (__isset.cover != rhs.__isset.cover)
      return false;
    else if (__isset.cover && !(cover == rhs.cover))
      return false;
    if (__isset.area != rhs.__isset.area)
      return false;
    else if (__isset.area && !(area == rhs.area))
      return false;
    if (__isset.createtime != rhs.__isset.createtime)
      return false;
    else if (__isset.createtime && !(createtime == rhs.createtime))
      return false;
    if (__isset.photoTidAlbum != rhs.__isset.photoTidAlbum)
      return false;
    else if (__isset.photoTidAlbum && !(photoTidAlbum == rhs.photoTidAlbum))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    if (__isset.extra != rhs.__isset.extra)
      return false;
    else if (__isset.extra && !(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const TimUserBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimUserBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimUserBean &a, TimUserBean &b);

std::ostream& operator<<(std::ostream& out, const TimUserBean& obj);

typedef struct _TimRoomBean__isset {
  _TimRoomBean__isset() : founder(false), managers(false), cover(false), topic(false), label(false), gtype(false), kind(false), createtime(false), extend(false), extra(false) {}
  bool founder :1;
  bool managers :1;
  bool cover :1;
  bool topic :1;
  bool label :1;
  bool gtype :1;
  bool kind :1;
  bool createtime :1;
  bool extend :1;
  bool extra :1;
} _TimRoomBean__isset;

class TimRoomBean : public virtual ::apache::thrift::TBase {
 public:

  TimRoomBean(const TimRoomBean&);
  TimRoomBean& operator=(const TimRoomBean&);
  TimRoomBean() noexcept
              : founder(),
                cover(),
                topic(),
                label(),
                gtype(0),
                kind(0),
                createtime(0) {
  }

  virtual ~TimRoomBean() noexcept;
  std::string founder;
  std::vector<std::string>  managers;
  std::string cover;
  std::string topic;
  std::string label;
  int8_t gtype;
  int64_t kind;
  int64_t createtime;
  std::map<std::string, std::string>  extend;
  std::map<std::string, std::string>  extra;

  _TimRoomBean__isset __isset;

  void __set_founder(const std::string& val);

  void __set_managers(const std::vector<std::string> & val);

  void __set_cover(const std::string& val);

  void __set_topic(const std::string& val);

  void __set_label(const std::string& val);

  void __set_gtype(const int8_t val);

  void __set_kind(const int64_t val);

  void __set_createtime(const int64_t val);

  void __set_extend(const std::map<std::string, std::string> & val);

  void __set_extra(const std::map<std::string, std::string> & val);

  bool operator == (const TimRoomBean & rhs) const
  {
    if (__isset.founder != rhs.__isset.founder)
      return false;
    else if (__isset.founder && !(founder == rhs.founder))
      return false;
    if (__isset.managers != rhs.__isset.managers)
      return false;
    else if (__isset.managers && !(managers == rhs.managers))
      return false;
    if (__isset.cover != rhs.__isset.cover)
      return false;
    else if (__isset.cover && !(cover == rhs.cover))
      return false;
    if (__isset.topic != rhs.__isset.topic)
      return false;
    else if (__isset.topic && !(topic == rhs.topic))
      return false;
    if (__isset.label != rhs.__isset.label)
      return false;
    else if (__isset.label && !(label == rhs.label))
      return false;
    if (__isset.gtype != rhs.__isset.gtype)
      return false;
    else if (__isset.gtype && !(gtype == rhs.gtype))
      return false;
    if (__isset.kind != rhs.__isset.kind)
      return false;
    else if (__isset.kind && !(kind == rhs.kind))
      return false;
    if (__isset.createtime != rhs.__isset.createtime)
      return false;
    else if (__isset.createtime && !(createtime == rhs.createtime))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    if (__isset.extra != rhs.__isset.extra)
      return false;
    else if (__isset.extra && !(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const TimRoomBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimRoomBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimRoomBean &a, TimRoomBean &b);

std::ostream& operator<<(std::ostream& out, const TimRoomBean& obj);

typedef struct _TimAuth__isset {
  _TimAuth__isset() : name(false), pwd(false), domain(false), resource(false), termtyp(false), token(false), extend(false) {}
  bool name :1;
  bool pwd :1;
  bool domain :1;
  bool resource :1;
  bool termtyp :1;
  bool token :1;
  bool extend :1;
} _TimAuth__isset;

class TimAuth : public virtual ::apache::thrift::TBase {
 public:

  TimAuth(const TimAuth&);
  TimAuth& operator=(const TimAuth&);
  TimAuth() noexcept
          : name(),
            pwd(),
            domain(),
            resource(),
            termtyp(0),
            token(0) {
  }

  virtual ~TimAuth() noexcept;
  std::string name;
  std::string pwd;
  std::string domain;
  std::string resource;
  int8_t termtyp;
  int64_t token;
  std::map<std::string, std::string>  extend;

  _TimAuth__isset __isset;

  void __set_name(const std::string& val);

  void __set_pwd(const std::string& val);

  void __set_domain(const std::string& val);

  void __set_resource(const std::string& val);

  void __set_termtyp(const int8_t val);

  void __set_token(const int64_t val);

  void __set_extend(const std::map<std::string, std::string> & val);

  bool operator == (const TimAuth & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.pwd != rhs.__isset.pwd)
      return false;
    else if (__isset.pwd && !(pwd == rhs.pwd))
      return false;
    if (__isset.domain != rhs.__isset.domain)
      return false;
    else if (__isset.domain && !(domain == rhs.domain))
      return false;
    if (__isset.resource != rhs.__isset.resource)
      return false;
    else if (__isset.resource && !(resource == rhs.resource))
      return false;
    if (__isset.termtyp != rhs.__isset.termtyp)
      return false;
    else if (__isset.termtyp && !(termtyp == rhs.termtyp))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    return true;
  }
  bool operator != (const TimAuth &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimAuth & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimAuth &a, TimAuth &b);

std::ostream& operator<<(std::ostream& out, const TimAuth& obj);

typedef struct _TimPresence__isset {
  _TimPresence__isset() : id(false), offline(false), subStatus(false), fromTid(false), toTid(false), toList(false), show(false), status(false), extend(false), extra(false) {}
  bool id :1;
  bool offline :1;
  bool subStatus :1;
  bool fromTid :1;
  bool toTid :1;
  bool toList :1;
  bool show :1;
  bool status :1;
  bool extend :1;
  bool extra :1;
} _TimPresence__isset;

class TimPresence : public virtual ::apache::thrift::TBase {
 public:

  TimPresence(const TimPresence&);
  TimPresence& operator=(const TimPresence&);
  TimPresence() noexcept
              : id(0),
                offline(0),
                subStatus(0),
                show(0),
                status() {
  }

  virtual ~TimPresence() noexcept;
  int64_t id;
  bool offline;
  int8_t subStatus;
  Tid fromTid;
  Tid toTid;
  std::vector<std::string>  toList;
  int16_t show;
  std::string status;
  std::map<std::string, std::string>  extend;
  std::map<std::string, std::string>  extra;

  _TimPresence__isset __isset;

  void __set_id(const int64_t val);

  void __set_offline(const bool val);

  void __set_subStatus(const int8_t val);

  void __set_fromTid(const Tid& val);

  void __set_toTid(const Tid& val);

  void __set_toList(const std::vector<std::string> & val);

  void __set_show(const int16_t val);

  void __set_status(const std::string& val);

  void __set_extend(const std::map<std::string, std::string> & val);

  void __set_extra(const std::map<std::string, std::string> & val);

  bool operator == (const TimPresence & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.offline != rhs.__isset.offline)
      return false;
    else if (__isset.offline && !(offline == rhs.offline))
      return false;
    if (__isset.subStatus != rhs.__isset.subStatus)
      return false;
    else if (__isset.subStatus && !(subStatus == rhs.subStatus))
      return false;
    if (__isset.fromTid != rhs.__isset.fromTid)
      return false;
    else if (__isset.fromTid && !(fromTid == rhs.fromTid))
      return false;
    if (__isset.toTid != rhs.__isset.toTid)
      return false;
    else if (__isset.toTid && !(toTid == rhs.toTid))
      return false;
    if (__isset.toList != rhs.__isset.toList)
      return false;
    else if (__isset.toList && !(toList == rhs.toList))
      return false;
    if (__isset.show != rhs.__isset.show)
      return false;
    else if (__isset.show && !(show == rhs.show))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    if (__isset.extra != rhs.__isset.extra)
      return false;
    else if (__isset.extra && !(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const TimPresence &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimPresence & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimPresence &a, TimPresence &b);

std::ostream& operator<<(std::ostream& out, const TimPresence& obj);

typedef struct _TimMessage__isset {
  _TimMessage__isset() : id(false), mid(false), bnType(false), fromTid(false), toTid(false), roomTid(false), dataBinary(false), dataString(false), isOffline(false), timestamp(false), udtype(false), udshow(false), extend(false), extra(false) {}
  bool id :1;
  bool mid :1;
  bool bnType :1;
  bool fromTid :1;
  bool toTid :1;
  bool roomTid :1;
  bool dataBinary :1;
  bool dataString :1;
  bool isOffline :1;
  bool timestamp :1;
  bool udtype :1;
  bool udshow :1;
  bool extend :1;
  bool extra :1;
} _TimMessage__isset;

class TimMessage : public virtual ::apache::thrift::TBase {
 public:

  TimMessage(const TimMessage&);
  TimMessage& operator=(const TimMessage&);
  TimMessage() noexcept
             : msType(0),
               odType(0),
               id(0),
               mid(0),
               bnType(0),
               dataBinary(),
               dataString(),
               isOffline(0),
               timestamp(0),
               udtype(0),
               udshow(0) {
  }

  virtual ~TimMessage() noexcept;
  int8_t msType;
  int8_t odType;
  int64_t id;
  int64_t mid;
  int32_t bnType;
  Tid fromTid;
  Tid toTid;
  Tid roomTid;
  std::string dataBinary;
  std::string dataString;
  bool isOffline;
  int64_t timestamp;
  int16_t udtype;
  int16_t udshow;
  std::map<std::string, std::string>  extend;
  std::map<std::string, std::string>  extra;

  _TimMessage__isset __isset;

  void __set_msType(const int8_t val);

  void __set_odType(const int8_t val);

  void __set_id(const int64_t val);

  void __set_mid(const int64_t val);

  void __set_bnType(const int32_t val);

  void __set_fromTid(const Tid& val);

  void __set_toTid(const Tid& val);

  void __set_roomTid(const Tid& val);

  void __set_dataBinary(const std::string& val);

  void __set_dataString(const std::string& val);

  void __set_isOffline(const bool val);

  void __set_timestamp(const int64_t val);

  void __set_udtype(const int16_t val);

  void __set_udshow(const int16_t val);

  void __set_extend(const std::map<std::string, std::string> & val);

  void __set_extra(const std::map<std::string, std::string> & val);

  bool operator == (const TimMessage & rhs) const
  {
    if (!(msType == rhs.msType))
      return false;
    if (!(odType == rhs.odType))
      return false;
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.mid != rhs.__isset.mid)
      return false;
    else if (__isset.mid && !(mid == rhs.mid))
      return false;
    if (__isset.bnType != rhs.__isset.bnType)
      return false;
    else if (__isset.bnType && !(bnType == rhs.bnType))
      return false;
    if (__isset.fromTid != rhs.__isset.fromTid)
      return false;
    else if (__isset.fromTid && !(fromTid == rhs.fromTid))
      return false;
    if (__isset.toTid != rhs.__isset.toTid)
      return false;
    else if (__isset.toTid && !(toTid == rhs.toTid))
      return false;
    if (__isset.roomTid != rhs.__isset.roomTid)
      return false;
    else if (__isset.roomTid && !(roomTid == rhs.roomTid))
      return false;
    if (__isset.dataBinary != rhs.__isset.dataBinary)
      return false;
    else if (__isset.dataBinary && !(dataBinary == rhs.dataBinary))
      return false;
    if (__isset.dataString != rhs.__isset.dataString)
      return false;
    else if (__isset.dataString && !(dataString == rhs.dataString))
      return false;
    if (__isset.isOffline != rhs.__isset.isOffline)
      return false;
    else if (__isset.isOffline && !(isOffline == rhs.isOffline))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.udtype != rhs.__isset.udtype)
      return false;
    else if (__isset.udtype && !(udtype == rhs.udtype))
      return false;
    if (__isset.udshow != rhs.__isset.udshow)
      return false;
    else if (__isset.udshow && !(udshow == rhs.udshow))
      return false;
    if (__isset.extend != rhs.__isset.extend)
      return false;
    else if (__isset.extend && !(extend == rhs.extend))
      return false;
    if (__isset.extra != rhs.__isset.extra)
      return false;
    else if (__isset.extra && !(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const TimMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimMessage &a, TimMessage &b);

std::ostream& operator<<(std::ostream& out, const TimMessage& obj);

typedef struct _TimStream__isset {
  _TimStream__isset() : dtype(false), body(false) {}
  bool dtype :1;
  bool body :1;
} _TimStream__isset;

class TimStream : public virtual ::apache::thrift::TBase {
 public:

  TimStream(const TimStream&);
  TimStream& operator=(const TimStream&);
  TimStream() noexcept
            : id(0),
              VNode(),
              dtype(0),
              body(),
              fromNode() {
  }

  virtual ~TimStream() noexcept;
  int64_t id;
  std::string VNode;
  int8_t dtype;
  std::string body;
  std::string fromNode;

  _TimStream__isset __isset;

  void __set_id(const int64_t val);

  void __set_VNode(const std::string& val);

  void __set_dtype(const int8_t val);

  void __set_body(const std::string& val);

  void __set_fromNode(const std::string& val);

  bool operator == (const TimStream & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(VNode == rhs.VNode))
      return false;
    if (__isset.dtype != rhs.__isset.dtype)
      return false;
    else if (__isset.dtype && !(dtype == rhs.dtype))
      return false;
    if (__isset.body != rhs.__isset.body)
      return false;
    else if (__isset.body && !(body == rhs.body))
      return false;
    if (!(fromNode == rhs.fromNode))
      return false;
    return true;
  }
  bool operator != (const TimStream &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimStream & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimStream &a, TimStream &b);

std::ostream& operator<<(std::ostream& out, const TimStream& obj);

typedef struct _TimNodes__isset {
  _TimNodes__isset() : nodelist(false), usermap(false), roommap(false), node(false) {}
  bool nodelist :1;
  bool usermap :1;
  bool roommap :1;
  bool node :1;
} _TimNodes__isset;

class TimNodes : public virtual ::apache::thrift::TBase {
 public:

  TimNodes(const TimNodes&);
  TimNodes& operator=(const TimNodes&);
  TimNodes() noexcept
           : ntype(0),
             node() {
  }

  virtual ~TimNodes() noexcept;
  int32_t ntype;
  std::vector<std::string>  nodelist;
  std::map<std::string, TimUserBean>  usermap;
  std::map<std::string, TimRoomBean>  roommap;
  std::string node;

  _TimNodes__isset __isset;

  void __set_ntype(const int32_t val);

  void __set_nodelist(const std::vector<std::string> & val);

  void __set_usermap(const std::map<std::string, TimUserBean> & val);

  void __set_roommap(const std::map<std::string, TimRoomBean> & val);

  void __set_node(const std::string& val);

  bool operator == (const TimNodes & rhs) const
  {
    if (!(ntype == rhs.ntype))
      return false;
    if (__isset.nodelist != rhs.__isset.nodelist)
      return false;
    else if (__isset.nodelist && !(nodelist == rhs.nodelist))
      return false;
    if (__isset.usermap != rhs.__isset.usermap)
      return false;
    else if (__isset.usermap && !(usermap == rhs.usermap))
      return false;
    if (__isset.roommap != rhs.__isset.roommap)
      return false;
    else if (__isset.roommap && !(roommap == rhs.roommap))
      return false;
    if (__isset.node != rhs.__isset.node)
      return false;
    else if (__isset.node && !(node == rhs.node))
      return false;
    return true;
  }
  bool operator != (const TimNodes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimNodes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimNodes &a, TimNodes &b);

std::ostream& operator<<(std::ostream& out, const TimNodes& obj);

typedef struct _TimMessageList__isset {
  _TimMessageList__isset() : id(false), messageList(false) {}
  bool id :1;
  bool messageList :1;
} _TimMessageList__isset;

class TimMessageList : public virtual ::apache::thrift::TBase {
 public:

  TimMessageList(const TimMessageList&);
  TimMessageList& operator=(const TimMessageList&);
  TimMessageList() noexcept
                 : id(0) {
  }

  virtual ~TimMessageList() noexcept;
  int64_t id;
  std::vector<TimMessage>  messageList;

  _TimMessageList__isset __isset;

  void __set_id(const int64_t val);

  void __set_messageList(const std::vector<TimMessage> & val);

  bool operator == (const TimMessageList & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.messageList != rhs.__isset.messageList)
      return false;
    else if (__isset.messageList && !(messageList == rhs.messageList))
      return false;
    return true;
  }
  bool operator != (const TimMessageList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimMessageList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimMessageList &a, TimMessageList &b);

std::ostream& operator<<(std::ostream& out, const TimMessageList& obj);



#endif
