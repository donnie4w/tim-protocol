/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "stub_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TimError::~TimError() noexcept {
}


void TimError::__set_code(const int32_t val) {
  this->code = val;
__isset.code = true;
}

void TimError::__set_info(const std::string& val) {
  this->info = val;
__isset.info = true;
}
std::ostream& operator<<(std::ostream& out, const TimError& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimError::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimError");

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info) {
    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->info);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimError &a, TimError &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

TimError::TimError(const TimError& other0) {
  code = other0.code;
  info = other0.info;
  __isset = other0.__isset;
}
TimError& TimError::operator=(const TimError& other1) {
  code = other1.code;
  info = other1.info;
  __isset = other1.__isset;
  return *this;
}
void TimError::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimError(";
  out << "code="; (__isset.code ? (out << to_string(code)) : (out << "<null>"));
  out << ", " << "info="; (__isset.info ? (out << to_string(info)) : (out << "<null>"));
  out << ")";
}


TimAck::~TimAck() noexcept {
}


void TimAck::__set_ok(const bool val) {
  this->ok = val;
}

void TimAck::__set_timType(const int8_t val) {
  this->timType = val;
}

void TimAck::__set_error(const TimError& val) {
  this->error = val;
__isset.error = true;
}

void TimAck::__set_t(const int64_t val) {
  this->t = val;
__isset.t = true;
}

void TimAck::__set_n(const std::string& val) {
  this->n = val;
__isset.n = true;
}

void TimAck::__set_t2(const int64_t val) {
  this->t2 = val;
__isset.t2 = true;
}

void TimAck::__set_n2(const std::string& val) {
  this->n2 = val;
__isset.n2 = true;
}
std::ostream& operator<<(std::ostream& out, const TimAck& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimAck::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ok = false;
  bool isset_timType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ok);
          isset_ok = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->timType);
          isset_timType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->error.read(iprot);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->n);
          this->__isset.n = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->t2);
          this->__isset.t2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->n2);
          this->__isset.n2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ok)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_timType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TimAck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimAck");

  xfer += oprot->writeFieldBegin("ok", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->ok);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->timType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->error.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.t) {
    xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->t);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.n) {
    xfer += oprot->writeFieldBegin("n", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->n);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.t2) {
    xfer += oprot->writeFieldBegin("t2", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->t2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.n2) {
    xfer += oprot->writeFieldBegin("n2", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->n2);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimAck &a, TimAck &b) {
  using ::std::swap;
  swap(a.ok, b.ok);
  swap(a.timType, b.timType);
  swap(a.error, b.error);
  swap(a.t, b.t);
  swap(a.n, b.n);
  swap(a.t2, b.t2);
  swap(a.n2, b.n2);
  swap(a.__isset, b.__isset);
}

TimAck::TimAck(const TimAck& other2) {
  ok = other2.ok;
  timType = other2.timType;
  error = other2.error;
  t = other2.t;
  n = other2.n;
  t2 = other2.t2;
  n2 = other2.n2;
  __isset = other2.__isset;
}
TimAck& TimAck::operator=(const TimAck& other3) {
  ok = other3.ok;
  timType = other3.timType;
  error = other3.error;
  t = other3.t;
  n = other3.n;
  t2 = other3.t2;
  n2 = other3.n2;
  __isset = other3.__isset;
  return *this;
}
void TimAck::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimAck(";
  out << "ok=" << to_string(ok);
  out << ", " << "timType=" << to_string(timType);
  out << ", " << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ", " << "t="; (__isset.t ? (out << to_string(t)) : (out << "<null>"));
  out << ", " << "n="; (__isset.n ? (out << to_string(n)) : (out << "<null>"));
  out << ", " << "t2="; (__isset.t2 ? (out << to_string(t2)) : (out << "<null>"));
  out << ", " << "n2="; (__isset.n2 ? (out << to_string(n2)) : (out << "<null>"));
  out << ")";
}


TimReq::~TimReq() noexcept {
}


void TimReq::__set_rtype(const int32_t val) {
  this->rtype = val;
__isset.rtype = true;
}

void TimReq::__set_node(const std::string& val) {
  this->node = val;
__isset.node = true;
}

void TimReq::__set_node2(const std::string& val) {
  this->node2 = val;
__isset.node2 = true;
}

void TimReq::__set_reqInt(const int64_t val) {
  this->reqInt = val;
__isset.reqInt = true;
}

void TimReq::__set_reqInt2(const int64_t val) {
  this->reqInt2 = val;
__isset.reqInt2 = true;
}

void TimReq::__set_reqStr(const std::string& val) {
  this->reqStr = val;
__isset.reqStr = true;
}

void TimReq::__set_reqStr2(const std::string& val) {
  this->reqStr2 = val;
__isset.reqStr2 = true;
}
std::ostream& operator<<(std::ostream& out, const TimReq& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rtype);
          this->__isset.rtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node2);
          this->__isset.node2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reqInt);
          this->__isset.reqInt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reqInt2);
          this->__isset.reqInt2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reqStr);
          this->__isset.reqStr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reqStr2);
          this->__isset.reqStr2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimReq");

  if (this->__isset.rtype) {
    xfer += oprot->writeFieldBegin("rtype", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->rtype);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node) {
    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->node);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node2) {
    xfer += oprot->writeFieldBegin("node2", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->node2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reqInt) {
    xfer += oprot->writeFieldBegin("reqInt", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->reqInt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reqInt2) {
    xfer += oprot->writeFieldBegin("reqInt2", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->reqInt2);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reqStr) {
    xfer += oprot->writeFieldBegin("reqStr", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->reqStr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reqStr2) {
    xfer += oprot->writeFieldBegin("reqStr2", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->reqStr2);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimReq &a, TimReq &b) {
  using ::std::swap;
  swap(a.rtype, b.rtype);
  swap(a.node, b.node);
  swap(a.node2, b.node2);
  swap(a.reqInt, b.reqInt);
  swap(a.reqInt2, b.reqInt2);
  swap(a.reqStr, b.reqStr);
  swap(a.reqStr2, b.reqStr2);
  swap(a.__isset, b.__isset);
}

TimReq::TimReq(const TimReq& other4) {
  rtype = other4.rtype;
  node = other4.node;
  node2 = other4.node2;
  reqInt = other4.reqInt;
  reqInt2 = other4.reqInt2;
  reqStr = other4.reqStr;
  reqStr2 = other4.reqStr2;
  __isset = other4.__isset;
}
TimReq& TimReq::operator=(const TimReq& other5) {
  rtype = other5.rtype;
  node = other5.node;
  node2 = other5.node2;
  reqInt = other5.reqInt;
  reqInt2 = other5.reqInt2;
  reqStr = other5.reqStr;
  reqStr2 = other5.reqStr2;
  __isset = other5.__isset;
  return *this;
}
void TimReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimReq(";
  out << "rtype="; (__isset.rtype ? (out << to_string(rtype)) : (out << "<null>"));
  out << ", " << "node="; (__isset.node ? (out << to_string(node)) : (out << "<null>"));
  out << ", " << "node2="; (__isset.node2 ? (out << to_string(node2)) : (out << "<null>"));
  out << ", " << "reqInt="; (__isset.reqInt ? (out << to_string(reqInt)) : (out << "<null>"));
  out << ", " << "reqInt2="; (__isset.reqInt2 ? (out << to_string(reqInt2)) : (out << "<null>"));
  out << ", " << "reqStr="; (__isset.reqStr ? (out << to_string(reqStr)) : (out << "<null>"));
  out << ", " << "reqStr2="; (__isset.reqStr2 ? (out << to_string(reqStr2)) : (out << "<null>"));
  out << ")";
}


Tid::~Tid() noexcept {
}


void Tid::__set_node(const std::string& val) {
  this->node = val;
}

void Tid::__set_domain(const std::string& val) {
  this->domain = val;
__isset.domain = true;
}

void Tid::__set_resource(const std::string& val) {
  this->resource = val;
__isset.resource = true;
}

void Tid::__set_termtyp(const int8_t val) {
  this->termtyp = val;
__isset.termtyp = true;
}

void Tid::__set_extend(const std::map<std::string, std::string> & val) {
  this->extend = val;
__isset.extend = true;
}
std::ostream& operator<<(std::ostream& out, const Tid& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Tid::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_node = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node);
          isset_node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resource);
          this->__isset.resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->termtyp);
          this->__isset.termtyp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extend.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            xfer += iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              std::string _key11;
              xfer += iprot->readString(_key11);
              std::string& _val12 = this->extend[_key11];
              xfer += iprot->readString(_val12);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_node)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Tid::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tid");

  xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->node);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.domain) {
    xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->domain);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resource) {
    xfer += oprot->writeFieldBegin("resource", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->resource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.termtyp) {
    xfer += oprot->writeFieldBegin("termtyp", ::apache::thrift::protocol::T_BYTE, 4);
    xfer += oprot->writeByte(this->termtyp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_MAP, 5);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extend.size()));
      std::map<std::string, std::string> ::const_iterator _iter13;
      for (_iter13 = this->extend.begin(); _iter13 != this->extend.end(); ++_iter13)
      {
        xfer += oprot->writeString(_iter13->first);
        xfer += oprot->writeString(_iter13->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tid &a, Tid &b) {
  using ::std::swap;
  swap(a.node, b.node);
  swap(a.domain, b.domain);
  swap(a.resource, b.resource);
  swap(a.termtyp, b.termtyp);
  swap(a.extend, b.extend);
  swap(a.__isset, b.__isset);
}

Tid::Tid(const Tid& other14) {
  node = other14.node;
  domain = other14.domain;
  resource = other14.resource;
  termtyp = other14.termtyp;
  extend = other14.extend;
  __isset = other14.__isset;
}
Tid& Tid::operator=(const Tid& other15) {
  node = other15.node;
  domain = other15.domain;
  resource = other15.resource;
  termtyp = other15.termtyp;
  extend = other15.extend;
  __isset = other15.__isset;
  return *this;
}
void Tid::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tid(";
  out << "node=" << to_string(node);
  out << ", " << "domain="; (__isset.domain ? (out << to_string(domain)) : (out << "<null>"));
  out << ", " << "resource="; (__isset.resource ? (out << to_string(resource)) : (out << "<null>"));
  out << ", " << "termtyp="; (__isset.termtyp ? (out << to_string(termtyp)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ")";
}


TimUserBean::~TimUserBean() noexcept {
}


void TimUserBean::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void TimUserBean::__set_nickName(const std::string& val) {
  this->nickName = val;
__isset.nickName = true;
}

void TimUserBean::__set_brithday(const std::string& val) {
  this->brithday = val;
__isset.brithday = true;
}

void TimUserBean::__set_gender(const int8_t val) {
  this->gender = val;
__isset.gender = true;
}

void TimUserBean::__set_cover(const std::string& val) {
  this->cover = val;
__isset.cover = true;
}

void TimUserBean::__set_area(const std::string& val) {
  this->area = val;
__isset.area = true;
}

void TimUserBean::__set_createtime(const int64_t val) {
  this->createtime = val;
__isset.createtime = true;
}

void TimUserBean::__set_photoTidAlbum(const std::vector<std::string> & val) {
  this->photoTidAlbum = val;
__isset.photoTidAlbum = true;
}

void TimUserBean::__set_extend(const std::map<std::string, std::string> & val) {
  this->extend = val;
__isset.extend = true;
}

void TimUserBean::__set_extra(const std::map<std::string, std::string> & val) {
  this->extra = val;
__isset.extra = true;
}
std::ostream& operator<<(std::ostream& out, const TimUserBean& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimUserBean::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickName);
          this->__isset.nickName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->brithday);
          this->__isset.brithday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gender);
          this->__isset.gender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cover);
          this->__isset.cover = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->area);
          this->__isset.area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createtime);
          this->__isset.createtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->photoTidAlbum.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->photoTidAlbum.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += iprot->readString(this->photoTidAlbum[_i20]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.photoTidAlbum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extend.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _ktype22;
            ::apache::thrift::protocol::TType _vtype23;
            xfer += iprot->readMapBegin(_ktype22, _vtype23, _size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              std::string _key26;
              xfer += iprot->readString(_key26);
              std::string& _val27 = this->extend[_key26];
              xfer += iprot->readString(_val27);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extra.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _ktype29;
            ::apache::thrift::protocol::TType _vtype30;
            xfer += iprot->readMapBegin(_ktype29, _vtype30, _size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              std::string _key33;
              xfer += iprot->readString(_key33);
              std::string& _val34 = this->extra[_key33];
              xfer += iprot->readBinary(_val34);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimUserBean::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimUserBean");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nickName) {
    xfer += oprot->writeFieldBegin("nickName", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->nickName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.brithday) {
    xfer += oprot->writeFieldBegin("brithday", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->brithday);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gender) {
    xfer += oprot->writeFieldBegin("gender", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->gender);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cover) {
    xfer += oprot->writeFieldBegin("cover", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->cover);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.area) {
    xfer += oprot->writeFieldBegin("area", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->area);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createtime) {
    xfer += oprot->writeFieldBegin("createtime", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->createtime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.photoTidAlbum) {
    xfer += oprot->writeFieldBegin("photoTidAlbum", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->photoTidAlbum.size()));
      std::vector<std::string> ::const_iterator _iter35;
      for (_iter35 = this->photoTidAlbum.begin(); _iter35 != this->photoTidAlbum.end(); ++_iter35)
      {
        xfer += oprot->writeString((*_iter35));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_MAP, 10);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extend.size()));
      std::map<std::string, std::string> ::const_iterator _iter36;
      for (_iter36 = this->extend.begin(); _iter36 != this->extend.end(); ++_iter36)
      {
        xfer += oprot->writeString(_iter36->first);
        xfer += oprot->writeString(_iter36->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extra) {
    xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_MAP, 11);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extra.size()));
      std::map<std::string, std::string> ::const_iterator _iter37;
      for (_iter37 = this->extra.begin(); _iter37 != this->extra.end(); ++_iter37)
      {
        xfer += oprot->writeString(_iter37->first);
        xfer += oprot->writeBinary(_iter37->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimUserBean &a, TimUserBean &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.nickName, b.nickName);
  swap(a.brithday, b.brithday);
  swap(a.gender, b.gender);
  swap(a.cover, b.cover);
  swap(a.area, b.area);
  swap(a.createtime, b.createtime);
  swap(a.photoTidAlbum, b.photoTidAlbum);
  swap(a.extend, b.extend);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

TimUserBean::TimUserBean(const TimUserBean& other38) {
  name = other38.name;
  nickName = other38.nickName;
  brithday = other38.brithday;
  gender = other38.gender;
  cover = other38.cover;
  area = other38.area;
  createtime = other38.createtime;
  photoTidAlbum = other38.photoTidAlbum;
  extend = other38.extend;
  extra = other38.extra;
  __isset = other38.__isset;
}
TimUserBean& TimUserBean::operator=(const TimUserBean& other39) {
  name = other39.name;
  nickName = other39.nickName;
  brithday = other39.brithday;
  gender = other39.gender;
  cover = other39.cover;
  area = other39.area;
  createtime = other39.createtime;
  photoTidAlbum = other39.photoTidAlbum;
  extend = other39.extend;
  extra = other39.extra;
  __isset = other39.__isset;
  return *this;
}
void TimUserBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimUserBean(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "nickName="; (__isset.nickName ? (out << to_string(nickName)) : (out << "<null>"));
  out << ", " << "brithday="; (__isset.brithday ? (out << to_string(brithday)) : (out << "<null>"));
  out << ", " << "gender="; (__isset.gender ? (out << to_string(gender)) : (out << "<null>"));
  out << ", " << "cover="; (__isset.cover ? (out << to_string(cover)) : (out << "<null>"));
  out << ", " << "area="; (__isset.area ? (out << to_string(area)) : (out << "<null>"));
  out << ", " << "createtime="; (__isset.createtime ? (out << to_string(createtime)) : (out << "<null>"));
  out << ", " << "photoTidAlbum="; (__isset.photoTidAlbum ? (out << to_string(photoTidAlbum)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "extra="; (__isset.extra ? (out << to_string(extra)) : (out << "<null>"));
  out << ")";
}


TimRoomBean::~TimRoomBean() noexcept {
}


void TimRoomBean::__set_founder(const std::string& val) {
  this->founder = val;
__isset.founder = true;
}

void TimRoomBean::__set_managers(const std::vector<std::string> & val) {
  this->managers = val;
__isset.managers = true;
}

void TimRoomBean::__set_cover(const std::string& val) {
  this->cover = val;
__isset.cover = true;
}

void TimRoomBean::__set_topic(const std::string& val) {
  this->topic = val;
__isset.topic = true;
}

void TimRoomBean::__set_label(const std::string& val) {
  this->label = val;
__isset.label = true;
}

void TimRoomBean::__set_gtype(const int8_t val) {
  this->gtype = val;
__isset.gtype = true;
}

void TimRoomBean::__set_kind(const int64_t val) {
  this->kind = val;
__isset.kind = true;
}

void TimRoomBean::__set_createtime(const int64_t val) {
  this->createtime = val;
__isset.createtime = true;
}

void TimRoomBean::__set_extend(const std::map<std::string, std::string> & val) {
  this->extend = val;
__isset.extend = true;
}

void TimRoomBean::__set_extra(const std::map<std::string, std::string> & val) {
  this->extra = val;
__isset.extra = true;
}
std::ostream& operator<<(std::ostream& out, const TimRoomBean& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimRoomBean::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->founder);
          this->__isset.founder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->managers.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->managers.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += iprot->readString(this->managers[_i44]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.managers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cover);
          this->__isset.cover = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topic);
          this->__isset.topic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->gtype);
          this->__isset.gtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->kind);
          this->__isset.kind = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createtime);
          this->__isset.createtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extend.clear();
            uint32_t _size45;
            ::apache::thrift::protocol::TType _ktype46;
            ::apache::thrift::protocol::TType _vtype47;
            xfer += iprot->readMapBegin(_ktype46, _vtype47, _size45);
            uint32_t _i49;
            for (_i49 = 0; _i49 < _size45; ++_i49)
            {
              std::string _key50;
              xfer += iprot->readString(_key50);
              std::string& _val51 = this->extend[_key50];
              xfer += iprot->readString(_val51);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extra.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _ktype53;
            ::apache::thrift::protocol::TType _vtype54;
            xfer += iprot->readMapBegin(_ktype53, _vtype54, _size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              std::string _key57;
              xfer += iprot->readString(_key57);
              std::string& _val58 = this->extra[_key57];
              xfer += iprot->readBinary(_val58);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimRoomBean::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimRoomBean");

  if (this->__isset.founder) {
    xfer += oprot->writeFieldBegin("founder", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->founder);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.managers) {
    xfer += oprot->writeFieldBegin("managers", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->managers.size()));
      std::vector<std::string> ::const_iterator _iter59;
      for (_iter59 = this->managers.begin(); _iter59 != this->managers.end(); ++_iter59)
      {
        xfer += oprot->writeString((*_iter59));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cover) {
    xfer += oprot->writeFieldBegin("cover", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cover);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.topic) {
    xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->topic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.label) {
    xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->label);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gtype) {
    xfer += oprot->writeFieldBegin("gtype", ::apache::thrift::protocol::T_BYTE, 6);
    xfer += oprot->writeByte(this->gtype);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.kind) {
    xfer += oprot->writeFieldBegin("kind", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->kind);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createtime) {
    xfer += oprot->writeFieldBegin("createtime", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->createtime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_MAP, 9);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extend.size()));
      std::map<std::string, std::string> ::const_iterator _iter60;
      for (_iter60 = this->extend.begin(); _iter60 != this->extend.end(); ++_iter60)
      {
        xfer += oprot->writeString(_iter60->first);
        xfer += oprot->writeString(_iter60->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extra) {
    xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_MAP, 10);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extra.size()));
      std::map<std::string, std::string> ::const_iterator _iter61;
      for (_iter61 = this->extra.begin(); _iter61 != this->extra.end(); ++_iter61)
      {
        xfer += oprot->writeString(_iter61->first);
        xfer += oprot->writeBinary(_iter61->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimRoomBean &a, TimRoomBean &b) {
  using ::std::swap;
  swap(a.founder, b.founder);
  swap(a.managers, b.managers);
  swap(a.cover, b.cover);
  swap(a.topic, b.topic);
  swap(a.label, b.label);
  swap(a.gtype, b.gtype);
  swap(a.kind, b.kind);
  swap(a.createtime, b.createtime);
  swap(a.extend, b.extend);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

TimRoomBean::TimRoomBean(const TimRoomBean& other62) {
  founder = other62.founder;
  managers = other62.managers;
  cover = other62.cover;
  topic = other62.topic;
  label = other62.label;
  gtype = other62.gtype;
  kind = other62.kind;
  createtime = other62.createtime;
  extend = other62.extend;
  extra = other62.extra;
  __isset = other62.__isset;
}
TimRoomBean& TimRoomBean::operator=(const TimRoomBean& other63) {
  founder = other63.founder;
  managers = other63.managers;
  cover = other63.cover;
  topic = other63.topic;
  label = other63.label;
  gtype = other63.gtype;
  kind = other63.kind;
  createtime = other63.createtime;
  extend = other63.extend;
  extra = other63.extra;
  __isset = other63.__isset;
  return *this;
}
void TimRoomBean::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimRoomBean(";
  out << "founder="; (__isset.founder ? (out << to_string(founder)) : (out << "<null>"));
  out << ", " << "managers="; (__isset.managers ? (out << to_string(managers)) : (out << "<null>"));
  out << ", " << "cover="; (__isset.cover ? (out << to_string(cover)) : (out << "<null>"));
  out << ", " << "topic="; (__isset.topic ? (out << to_string(topic)) : (out << "<null>"));
  out << ", " << "label="; (__isset.label ? (out << to_string(label)) : (out << "<null>"));
  out << ", " << "gtype="; (__isset.gtype ? (out << to_string(gtype)) : (out << "<null>"));
  out << ", " << "kind="; (__isset.kind ? (out << to_string(kind)) : (out << "<null>"));
  out << ", " << "createtime="; (__isset.createtime ? (out << to_string(createtime)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "extra="; (__isset.extra ? (out << to_string(extra)) : (out << "<null>"));
  out << ")";
}


TimAuth::~TimAuth() noexcept {
}


void TimAuth::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void TimAuth::__set_pwd(const std::string& val) {
  this->pwd = val;
__isset.pwd = true;
}

void TimAuth::__set_domain(const std::string& val) {
  this->domain = val;
__isset.domain = true;
}

void TimAuth::__set_resource(const std::string& val) {
  this->resource = val;
__isset.resource = true;
}

void TimAuth::__set_termtyp(const int8_t val) {
  this->termtyp = val;
__isset.termtyp = true;
}

void TimAuth::__set_token(const int64_t val) {
  this->token = val;
__isset.token = true;
}

void TimAuth::__set_extend(const std::map<std::string, std::string> & val) {
  this->extend = val;
__isset.extend = true;
}
std::ostream& operator<<(std::ostream& out, const TimAuth& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimAuth::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pwd);
          this->__isset.pwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->domain);
          this->__isset.domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->resource);
          this->__isset.resource = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->termtyp);
          this->__isset.termtyp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extend.clear();
            uint32_t _size64;
            ::apache::thrift::protocol::TType _ktype65;
            ::apache::thrift::protocol::TType _vtype66;
            xfer += iprot->readMapBegin(_ktype65, _vtype66, _size64);
            uint32_t _i68;
            for (_i68 = 0; _i68 < _size64; ++_i68)
            {
              std::string _key69;
              xfer += iprot->readString(_key69);
              std::string& _val70 = this->extend[_key69];
              xfer += iprot->readString(_val70);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimAuth::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimAuth");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pwd) {
    xfer += oprot->writeFieldBegin("pwd", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->pwd);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.domain) {
    xfer += oprot->writeFieldBegin("domain", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->domain);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resource) {
    xfer += oprot->writeFieldBegin("resource", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->resource);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.termtyp) {
    xfer += oprot->writeFieldBegin("termtyp", ::apache::thrift::protocol::T_BYTE, 5);
    xfer += oprot->writeByte(this->termtyp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.token) {
    xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->token);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_MAP, 7);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extend.size()));
      std::map<std::string, std::string> ::const_iterator _iter71;
      for (_iter71 = this->extend.begin(); _iter71 != this->extend.end(); ++_iter71)
      {
        xfer += oprot->writeString(_iter71->first);
        xfer += oprot->writeString(_iter71->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimAuth &a, TimAuth &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.pwd, b.pwd);
  swap(a.domain, b.domain);
  swap(a.resource, b.resource);
  swap(a.termtyp, b.termtyp);
  swap(a.token, b.token);
  swap(a.extend, b.extend);
  swap(a.__isset, b.__isset);
}

TimAuth::TimAuth(const TimAuth& other72) {
  name = other72.name;
  pwd = other72.pwd;
  domain = other72.domain;
  resource = other72.resource;
  termtyp = other72.termtyp;
  token = other72.token;
  extend = other72.extend;
  __isset = other72.__isset;
}
TimAuth& TimAuth::operator=(const TimAuth& other73) {
  name = other73.name;
  pwd = other73.pwd;
  domain = other73.domain;
  resource = other73.resource;
  termtyp = other73.termtyp;
  token = other73.token;
  extend = other73.extend;
  __isset = other73.__isset;
  return *this;
}
void TimAuth::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimAuth(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "pwd="; (__isset.pwd ? (out << to_string(pwd)) : (out << "<null>"));
  out << ", " << "domain="; (__isset.domain ? (out << to_string(domain)) : (out << "<null>"));
  out << ", " << "resource="; (__isset.resource ? (out << to_string(resource)) : (out << "<null>"));
  out << ", " << "termtyp="; (__isset.termtyp ? (out << to_string(termtyp)) : (out << "<null>"));
  out << ", " << "token="; (__isset.token ? (out << to_string(token)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ")";
}


TimPresence::~TimPresence() noexcept {
}


void TimPresence::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void TimPresence::__set_offline(const bool val) {
  this->offline = val;
__isset.offline = true;
}

void TimPresence::__set_subStatus(const int8_t val) {
  this->subStatus = val;
__isset.subStatus = true;
}

void TimPresence::__set_fromTid(const Tid& val) {
  this->fromTid = val;
__isset.fromTid = true;
}

void TimPresence::__set_toTid(const Tid& val) {
  this->toTid = val;
__isset.toTid = true;
}

void TimPresence::__set_toList(const std::vector<std::string> & val) {
  this->toList = val;
__isset.toList = true;
}

void TimPresence::__set_show(const int16_t val) {
  this->show = val;
__isset.show = true;
}

void TimPresence::__set_status(const std::string& val) {
  this->status = val;
__isset.status = true;
}

void TimPresence::__set_extend(const std::map<std::string, std::string> & val) {
  this->extend = val;
__isset.extend = true;
}

void TimPresence::__set_extra(const std::map<std::string, std::string> & val) {
  this->extra = val;
__isset.extra = true;
}
std::ostream& operator<<(std::ostream& out, const TimPresence& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimPresence::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->offline);
          this->__isset.offline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->subStatus);
          this->__isset.subStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fromTid.read(iprot);
          this->__isset.fromTid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->toTid.read(iprot);
          this->__isset.toTid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->toList.clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            this->toList.resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              xfer += iprot->readString(this->toList[_i78]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.toList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->show);
          this->__isset.show = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extend.clear();
            uint32_t _size79;
            ::apache::thrift::protocol::TType _ktype80;
            ::apache::thrift::protocol::TType _vtype81;
            xfer += iprot->readMapBegin(_ktype80, _vtype81, _size79);
            uint32_t _i83;
            for (_i83 = 0; _i83 < _size79; ++_i83)
            {
              std::string _key84;
              xfer += iprot->readString(_key84);
              std::string& _val85 = this->extend[_key84];
              xfer += iprot->readString(_val85);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extra.clear();
            uint32_t _size86;
            ::apache::thrift::protocol::TType _ktype87;
            ::apache::thrift::protocol::TType _vtype88;
            xfer += iprot->readMapBegin(_ktype87, _vtype88, _size86);
            uint32_t _i90;
            for (_i90 = 0; _i90 < _size86; ++_i90)
            {
              std::string _key91;
              xfer += iprot->readString(_key91);
              std::string& _val92 = this->extra[_key91];
              xfer += iprot->readBinary(_val92);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimPresence::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimPresence");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offline) {
    xfer += oprot->writeFieldBegin("offline", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->offline);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subStatus) {
    xfer += oprot->writeFieldBegin("subStatus", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->subStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fromTid) {
    xfer += oprot->writeFieldBegin("fromTid", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->fromTid.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.toTid) {
    xfer += oprot->writeFieldBegin("toTid", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->toTid.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.toList) {
    xfer += oprot->writeFieldBegin("toList", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->toList.size()));
      std::vector<std::string> ::const_iterator _iter93;
      for (_iter93 = this->toList.begin(); _iter93 != this->toList.end(); ++_iter93)
      {
        xfer += oprot->writeString((*_iter93));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.show) {
    xfer += oprot->writeFieldBegin("show", ::apache::thrift::protocol::T_I16, 7);
    xfer += oprot->writeI16(this->show);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_MAP, 9);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extend.size()));
      std::map<std::string, std::string> ::const_iterator _iter94;
      for (_iter94 = this->extend.begin(); _iter94 != this->extend.end(); ++_iter94)
      {
        xfer += oprot->writeString(_iter94->first);
        xfer += oprot->writeString(_iter94->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extra) {
    xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_MAP, 10);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extra.size()));
      std::map<std::string, std::string> ::const_iterator _iter95;
      for (_iter95 = this->extra.begin(); _iter95 != this->extra.end(); ++_iter95)
      {
        xfer += oprot->writeString(_iter95->first);
        xfer += oprot->writeBinary(_iter95->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimPresence &a, TimPresence &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.offline, b.offline);
  swap(a.subStatus, b.subStatus);
  swap(a.fromTid, b.fromTid);
  swap(a.toTid, b.toTid);
  swap(a.toList, b.toList);
  swap(a.show, b.show);
  swap(a.status, b.status);
  swap(a.extend, b.extend);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

TimPresence::TimPresence(const TimPresence& other96) {
  id = other96.id;
  offline = other96.offline;
  subStatus = other96.subStatus;
  fromTid = other96.fromTid;
  toTid = other96.toTid;
  toList = other96.toList;
  show = other96.show;
  status = other96.status;
  extend = other96.extend;
  extra = other96.extra;
  __isset = other96.__isset;
}
TimPresence& TimPresence::operator=(const TimPresence& other97) {
  id = other97.id;
  offline = other97.offline;
  subStatus = other97.subStatus;
  fromTid = other97.fromTid;
  toTid = other97.toTid;
  toList = other97.toList;
  show = other97.show;
  status = other97.status;
  extend = other97.extend;
  extra = other97.extra;
  __isset = other97.__isset;
  return *this;
}
void TimPresence::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimPresence(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "offline="; (__isset.offline ? (out << to_string(offline)) : (out << "<null>"));
  out << ", " << "subStatus="; (__isset.subStatus ? (out << to_string(subStatus)) : (out << "<null>"));
  out << ", " << "fromTid="; (__isset.fromTid ? (out << to_string(fromTid)) : (out << "<null>"));
  out << ", " << "toTid="; (__isset.toTid ? (out << to_string(toTid)) : (out << "<null>"));
  out << ", " << "toList="; (__isset.toList ? (out << to_string(toList)) : (out << "<null>"));
  out << ", " << "show="; (__isset.show ? (out << to_string(show)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "extra="; (__isset.extra ? (out << to_string(extra)) : (out << "<null>"));
  out << ")";
}


TimMessage::~TimMessage() noexcept {
}


void TimMessage::__set_msType(const int8_t val) {
  this->msType = val;
}

void TimMessage::__set_odType(const int8_t val) {
  this->odType = val;
}

void TimMessage::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void TimMessage::__set_mid(const int64_t val) {
  this->mid = val;
__isset.mid = true;
}

void TimMessage::__set_bnType(const int32_t val) {
  this->bnType = val;
__isset.bnType = true;
}

void TimMessage::__set_fromTid(const Tid& val) {
  this->fromTid = val;
__isset.fromTid = true;
}

void TimMessage::__set_toTid(const Tid& val) {
  this->toTid = val;
__isset.toTid = true;
}

void TimMessage::__set_roomTid(const Tid& val) {
  this->roomTid = val;
__isset.roomTid = true;
}

void TimMessage::__set_dataBinary(const std::string& val) {
  this->dataBinary = val;
__isset.dataBinary = true;
}

void TimMessage::__set_dataString(const std::string& val) {
  this->dataString = val;
__isset.dataString = true;
}

void TimMessage::__set_isOffline(const bool val) {
  this->isOffline = val;
__isset.isOffline = true;
}

void TimMessage::__set_timestamp(const int64_t val) {
  this->timestamp = val;
__isset.timestamp = true;
}

void TimMessage::__set_udtype(const int16_t val) {
  this->udtype = val;
__isset.udtype = true;
}

void TimMessage::__set_udshow(const int16_t val) {
  this->udshow = val;
__isset.udshow = true;
}

void TimMessage::__set_extend(const std::map<std::string, std::string> & val) {
  this->extend = val;
__isset.extend = true;
}

void TimMessage::__set_extra(const std::map<std::string, std::string> & val) {
  this->extra = val;
__isset.extra = true;
}
std::ostream& operator<<(std::ostream& out, const TimMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_msType = false;
  bool isset_odType = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->msType);
          isset_msType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->odType);
          isset_odType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mid);
          this->__isset.mid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bnType);
          this->__isset.bnType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->fromTid.read(iprot);
          this->__isset.fromTid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->toTid.read(iprot);
          this->__isset.toTid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->roomTid.read(iprot);
          this->__isset.roomTid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->dataBinary);
          this->__isset.dataBinary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataString);
          this->__isset.dataString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isOffline);
          this->__isset.isOffline = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->udtype);
          this->__isset.udtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->udshow);
          this->__isset.udshow = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extend.clear();
            uint32_t _size98;
            ::apache::thrift::protocol::TType _ktype99;
            ::apache::thrift::protocol::TType _vtype100;
            xfer += iprot->readMapBegin(_ktype99, _vtype100, _size98);
            uint32_t _i102;
            for (_i102 = 0; _i102 < _size98; ++_i102)
            {
              std::string _key103;
              xfer += iprot->readString(_key103);
              std::string& _val104 = this->extend[_key103];
              xfer += iprot->readString(_val104);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extra.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _ktype106;
            ::apache::thrift::protocol::TType _vtype107;
            xfer += iprot->readMapBegin(_ktype106, _vtype107, _size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              std::string _key110;
              xfer += iprot->readString(_key110);
              std::string& _val111 = this->extra[_key110];
              xfer += iprot->readBinary(_val111);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_msType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_odType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TimMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimMessage");

  xfer += oprot->writeFieldBegin("msType", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->msType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("odType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->odType);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mid) {
    xfer += oprot->writeFieldBegin("mid", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->mid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bnType) {
    xfer += oprot->writeFieldBegin("bnType", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->bnType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fromTid) {
    xfer += oprot->writeFieldBegin("fromTid", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->fromTid.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.toTid) {
    xfer += oprot->writeFieldBegin("toTid", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->toTid.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roomTid) {
    xfer += oprot->writeFieldBegin("roomTid", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->roomTid.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dataBinary) {
    xfer += oprot->writeFieldBegin("dataBinary", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeBinary(this->dataBinary);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dataString) {
    xfer += oprot->writeFieldBegin("dataString", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->dataString);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isOffline) {
    xfer += oprot->writeFieldBegin("isOffline", ::apache::thrift::protocol::T_BOOL, 11);
    xfer += oprot->writeBool(this->isOffline);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp) {
    xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 12);
    xfer += oprot->writeI64(this->timestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.udtype) {
    xfer += oprot->writeFieldBegin("udtype", ::apache::thrift::protocol::T_I16, 13);
    xfer += oprot->writeI16(this->udtype);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.udshow) {
    xfer += oprot->writeFieldBegin("udshow", ::apache::thrift::protocol::T_I16, 14);
    xfer += oprot->writeI16(this->udshow);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_MAP, 15);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extend.size()));
      std::map<std::string, std::string> ::const_iterator _iter112;
      for (_iter112 = this->extend.begin(); _iter112 != this->extend.end(); ++_iter112)
      {
        xfer += oprot->writeString(_iter112->first);
        xfer += oprot->writeString(_iter112->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extra) {
    xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_MAP, 16);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extra.size()));
      std::map<std::string, std::string> ::const_iterator _iter113;
      for (_iter113 = this->extra.begin(); _iter113 != this->extra.end(); ++_iter113)
      {
        xfer += oprot->writeString(_iter113->first);
        xfer += oprot->writeBinary(_iter113->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimMessage &a, TimMessage &b) {
  using ::std::swap;
  swap(a.msType, b.msType);
  swap(a.odType, b.odType);
  swap(a.id, b.id);
  swap(a.mid, b.mid);
  swap(a.bnType, b.bnType);
  swap(a.fromTid, b.fromTid);
  swap(a.toTid, b.toTid);
  swap(a.roomTid, b.roomTid);
  swap(a.dataBinary, b.dataBinary);
  swap(a.dataString, b.dataString);
  swap(a.isOffline, b.isOffline);
  swap(a.timestamp, b.timestamp);
  swap(a.udtype, b.udtype);
  swap(a.udshow, b.udshow);
  swap(a.extend, b.extend);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

TimMessage::TimMessage(const TimMessage& other114) {
  msType = other114.msType;
  odType = other114.odType;
  id = other114.id;
  mid = other114.mid;
  bnType = other114.bnType;
  fromTid = other114.fromTid;
  toTid = other114.toTid;
  roomTid = other114.roomTid;
  dataBinary = other114.dataBinary;
  dataString = other114.dataString;
  isOffline = other114.isOffline;
  timestamp = other114.timestamp;
  udtype = other114.udtype;
  udshow = other114.udshow;
  extend = other114.extend;
  extra = other114.extra;
  __isset = other114.__isset;
}
TimMessage& TimMessage::operator=(const TimMessage& other115) {
  msType = other115.msType;
  odType = other115.odType;
  id = other115.id;
  mid = other115.mid;
  bnType = other115.bnType;
  fromTid = other115.fromTid;
  toTid = other115.toTid;
  roomTid = other115.roomTid;
  dataBinary = other115.dataBinary;
  dataString = other115.dataString;
  isOffline = other115.isOffline;
  timestamp = other115.timestamp;
  udtype = other115.udtype;
  udshow = other115.udshow;
  extend = other115.extend;
  extra = other115.extra;
  __isset = other115.__isset;
  return *this;
}
void TimMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimMessage(";
  out << "msType=" << to_string(msType);
  out << ", " << "odType=" << to_string(odType);
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "mid="; (__isset.mid ? (out << to_string(mid)) : (out << "<null>"));
  out << ", " << "bnType="; (__isset.bnType ? (out << to_string(bnType)) : (out << "<null>"));
  out << ", " << "fromTid="; (__isset.fromTid ? (out << to_string(fromTid)) : (out << "<null>"));
  out << ", " << "toTid="; (__isset.toTid ? (out << to_string(toTid)) : (out << "<null>"));
  out << ", " << "roomTid="; (__isset.roomTid ? (out << to_string(roomTid)) : (out << "<null>"));
  out << ", " << "dataBinary="; (__isset.dataBinary ? (out << to_string(dataBinary)) : (out << "<null>"));
  out << ", " << "dataString="; (__isset.dataString ? (out << to_string(dataString)) : (out << "<null>"));
  out << ", " << "isOffline="; (__isset.isOffline ? (out << to_string(isOffline)) : (out << "<null>"));
  out << ", " << "timestamp="; (__isset.timestamp ? (out << to_string(timestamp)) : (out << "<null>"));
  out << ", " << "udtype="; (__isset.udtype ? (out << to_string(udtype)) : (out << "<null>"));
  out << ", " << "udshow="; (__isset.udshow ? (out << to_string(udshow)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "extra="; (__isset.extra ? (out << to_string(extra)) : (out << "<null>"));
  out << ")";
}


TimStream::~TimStream() noexcept {
}


void TimStream::__set_id(const int64_t val) {
  this->id = val;
}

void TimStream::__set_VNode(const std::string& val) {
  this->VNode = val;
}

void TimStream::__set_dtype(const int8_t val) {
  this->dtype = val;
__isset.dtype = true;
}

void TimStream::__set_body(const std::string& val) {
  this->body = val;
__isset.body = true;
}

void TimStream::__set_fromNode(const std::string& val) {
  this->fromNode = val;
}
std::ostream& operator<<(std::ostream& out, const TimStream& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimStream::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_id = false;
  bool isset_VNode = false;
  bool isset_fromNode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          isset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->VNode);
          isset_VNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dtype);
          this->__isset.dtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->body);
          this->__isset.body = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fromNode);
          isset_fromNode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_VNode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_fromNode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TimStream::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimStream");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("VNode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->VNode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.dtype) {
    xfer += oprot->writeFieldBegin("dtype", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->dtype);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.body) {
    xfer += oprot->writeFieldBegin("body", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->body);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("fromNode", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->fromNode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimStream &a, TimStream &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.VNode, b.VNode);
  swap(a.dtype, b.dtype);
  swap(a.body, b.body);
  swap(a.fromNode, b.fromNode);
  swap(a.__isset, b.__isset);
}

TimStream::TimStream(const TimStream& other116) {
  id = other116.id;
  VNode = other116.VNode;
  dtype = other116.dtype;
  body = other116.body;
  fromNode = other116.fromNode;
  __isset = other116.__isset;
}
TimStream& TimStream::operator=(const TimStream& other117) {
  id = other117.id;
  VNode = other117.VNode;
  dtype = other117.dtype;
  body = other117.body;
  fromNode = other117.fromNode;
  __isset = other117.__isset;
  return *this;
}
void TimStream::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimStream(";
  out << "id=" << to_string(id);
  out << ", " << "VNode=" << to_string(VNode);
  out << ", " << "dtype="; (__isset.dtype ? (out << to_string(dtype)) : (out << "<null>"));
  out << ", " << "body="; (__isset.body ? (out << to_string(body)) : (out << "<null>"));
  out << ", " << "fromNode=" << to_string(fromNode);
  out << ")";
}


TimNodes::~TimNodes() noexcept {
}


void TimNodes::__set_ntype(const int32_t val) {
  this->ntype = val;
}

void TimNodes::__set_nodelist(const std::vector<std::string> & val) {
  this->nodelist = val;
__isset.nodelist = true;
}

void TimNodes::__set_usermap(const std::map<std::string, TimUserBean> & val) {
  this->usermap = val;
__isset.usermap = true;
}

void TimNodes::__set_roommap(const std::map<std::string, TimRoomBean> & val) {
  this->roommap = val;
__isset.roommap = true;
}

void TimNodes::__set_node(const std::string& val) {
  this->node = val;
__isset.node = true;
}
std::ostream& operator<<(std::ostream& out, const TimNodes& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimNodes::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ntype = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ntype);
          isset_ntype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nodelist.clear();
            uint32_t _size118;
            ::apache::thrift::protocol::TType _etype121;
            xfer += iprot->readListBegin(_etype121, _size118);
            this->nodelist.resize(_size118);
            uint32_t _i122;
            for (_i122 = 0; _i122 < _size118; ++_i122)
            {
              xfer += iprot->readString(this->nodelist[_i122]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nodelist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->usermap.clear();
            uint32_t _size123;
            ::apache::thrift::protocol::TType _ktype124;
            ::apache::thrift::protocol::TType _vtype125;
            xfer += iprot->readMapBegin(_ktype124, _vtype125, _size123);
            uint32_t _i127;
            for (_i127 = 0; _i127 < _size123; ++_i127)
            {
              std::string _key128;
              xfer += iprot->readString(_key128);
              TimUserBean& _val129 = this->usermap[_key128];
              xfer += _val129.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.usermap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->roommap.clear();
            uint32_t _size130;
            ::apache::thrift::protocol::TType _ktype131;
            ::apache::thrift::protocol::TType _vtype132;
            xfer += iprot->readMapBegin(_ktype131, _vtype132, _size130);
            uint32_t _i134;
            for (_i134 = 0; _i134 < _size130; ++_i134)
            {
              std::string _key135;
              xfer += iprot->readString(_key135);
              TimRoomBean& _val136 = this->roommap[_key135];
              xfer += _val136.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.roommap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node);
          this->__isset.node = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ntype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TimNodes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimNodes");

  xfer += oprot->writeFieldBegin("ntype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ntype);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.nodelist) {
    xfer += oprot->writeFieldBegin("nodelist", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->nodelist.size()));
      std::vector<std::string> ::const_iterator _iter137;
      for (_iter137 = this->nodelist.begin(); _iter137 != this->nodelist.end(); ++_iter137)
      {
        xfer += oprot->writeString((*_iter137));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.usermap) {
    xfer += oprot->writeFieldBegin("usermap", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->usermap.size()));
      std::map<std::string, TimUserBean> ::const_iterator _iter138;
      for (_iter138 = this->usermap.begin(); _iter138 != this->usermap.end(); ++_iter138)
      {
        xfer += oprot->writeString(_iter138->first);
        xfer += _iter138->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.roommap) {
    xfer += oprot->writeFieldBegin("roommap", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->roommap.size()));
      std::map<std::string, TimRoomBean> ::const_iterator _iter139;
      for (_iter139 = this->roommap.begin(); _iter139 != this->roommap.end(); ++_iter139)
      {
        xfer += oprot->writeString(_iter139->first);
        xfer += _iter139->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node) {
    xfer += oprot->writeFieldBegin("node", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->node);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimNodes &a, TimNodes &b) {
  using ::std::swap;
  swap(a.ntype, b.ntype);
  swap(a.nodelist, b.nodelist);
  swap(a.usermap, b.usermap);
  swap(a.roommap, b.roommap);
  swap(a.node, b.node);
  swap(a.__isset, b.__isset);
}

TimNodes::TimNodes(const TimNodes& other140) {
  ntype = other140.ntype;
  nodelist = other140.nodelist;
  usermap = other140.usermap;
  roommap = other140.roommap;
  node = other140.node;
  __isset = other140.__isset;
}
TimNodes& TimNodes::operator=(const TimNodes& other141) {
  ntype = other141.ntype;
  nodelist = other141.nodelist;
  usermap = other141.usermap;
  roommap = other141.roommap;
  node = other141.node;
  __isset = other141.__isset;
  return *this;
}
void TimNodes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimNodes(";
  out << "ntype=" << to_string(ntype);
  out << ", " << "nodelist="; (__isset.nodelist ? (out << to_string(nodelist)) : (out << "<null>"));
  out << ", " << "usermap="; (__isset.usermap ? (out << to_string(usermap)) : (out << "<null>"));
  out << ", " << "roommap="; (__isset.roommap ? (out << to_string(roommap)) : (out << "<null>"));
  out << ", " << "node="; (__isset.node ? (out << to_string(node)) : (out << "<null>"));
  out << ")";
}


TimMessageList::~TimMessageList() noexcept {
}


void TimMessageList::__set_id(const int64_t val) {
  this->id = val;
__isset.id = true;
}

void TimMessageList::__set_messageList(const std::vector<TimMessage> & val) {
  this->messageList = val;
__isset.messageList = true;
}
std::ostream& operator<<(std::ostream& out, const TimMessageList& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TimMessageList::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messageList.clear();
            uint32_t _size142;
            ::apache::thrift::protocol::TType _etype145;
            xfer += iprot->readListBegin(_etype145, _size142);
            this->messageList.resize(_size142);
            uint32_t _i146;
            for (_i146 = 0; _i146 < _size142; ++_i146)
            {
              xfer += this->messageList[_i146].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messageList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimMessageList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TimMessageList");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messageList) {
    xfer += oprot->writeFieldBegin("messageList", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messageList.size()));
      std::vector<TimMessage> ::const_iterator _iter147;
      for (_iter147 = this->messageList.begin(); _iter147 != this->messageList.end(); ++_iter147)
      {
        xfer += (*_iter147).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TimMessageList &a, TimMessageList &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.messageList, b.messageList);
  swap(a.__isset, b.__isset);
}

TimMessageList::TimMessageList(const TimMessageList& other148) {
  id = other148.id;
  messageList = other148.messageList;
  __isset = other148.__isset;
}
TimMessageList& TimMessageList::operator=(const TimMessageList& other149) {
  id = other149.id;
  messageList = other149.messageList;
  __isset = other149.__isset;
  return *this;
}
void TimMessageList::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimMessageList(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "messageList="; (__isset.messageList ? (out << to_string(messageList)) : (out << "<null>"));
  out << ")";
}


