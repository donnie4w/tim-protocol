/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimUserBean(
  var name: kotlin.String? = null,
  var nickName: kotlin.String? = null,
  var brithday: kotlin.String? = null,
  var gender: kotlin.Byte? = null,
  var cover: kotlin.String? = null,
  var area: kotlin.String? = null,
  var createtime: kotlin.Long? = null,
  var photoTidAlbum: kotlin.collections.List<kotlin.String>? = null,
  var extend: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,
  var extra: kotlin.collections.Map<kotlin.String, kotlin.ByteArray>? = null
) : org.apache.thrift.TBase<TimUserBean, TimUserBean._Fields> {
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    NAME(1, "name"),
    NICK_NAME(2, "nickName"),
    BRITHDAY(4, "brithday"),
    GENDER(5, "gender"),
    COVER(6, "cover"),
    AREA(7, "area"),
    CREATETIME(8, "createtime"),
    PHOTO_TID_ALBUM(9, "photoTidAlbum"),
    EXTEND(10, "extend"),
    EXTRA(11, "extra");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> NAME
          2 -> NICK_NAME
          4 -> BRITHDAY
          5 -> GENDER
          6 -> COVER
          7 -> AREA
          8 -> CREATETIME
          9 -> PHOTO_TID_ALBUM
          10 -> EXTEND
          11 -> EXTRA
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "name" -> NAME
          "nickName" -> NICK_NAME
          "brithday" -> BRITHDAY
          "gender" -> GENDER
          "cover" -> COVER
          "area" -> AREA
          "createtime" -> CREATETIME
          "photoTidAlbum" -> PHOTO_TID_ALBUM
          "extend" -> EXTEND
          "extra" -> EXTRA
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimUserBean")
    private val NAME_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, 1)
    private val NAME_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "name",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val NICK_NAME_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, 2)
    private val NICK_NAME_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "nickName",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val BRITHDAY_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("brithday", org.apache.thrift.protocol.TType.STRING, 4)
    private val BRITHDAY_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "brithday",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val GENDER_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.BYTE, 5)
    private val GENDER_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "gender",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
      emptyMap())
    private val COVER_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("cover", org.apache.thrift.protocol.TType.STRING, 6)
    private val COVER_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "cover",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val AREA_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRING, 7)
    private val AREA_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "area",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val CREATETIME_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.I64, 8)
    private val CREATETIME_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "createtime",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val PHOTO_TID_ALBUM_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("photoTidAlbum", org.apache.thrift.protocol.TType.LIST, 9)
    private val PHOTO_TID_ALBUM_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "photoTidAlbum",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val EXTEND_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, 10)
    private val EXTEND_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extend",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val EXTRA_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, 11)
    private val EXTRA_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extra",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.NAME to NAME_FIELD_META_DATA,
      _Fields.NICK_NAME to NICK_NAME_FIELD_META_DATA,
      _Fields.BRITHDAY to BRITHDAY_FIELD_META_DATA,
      _Fields.GENDER to GENDER_FIELD_META_DATA,
      _Fields.COVER to COVER_FIELD_META_DATA,
      _Fields.AREA to AREA_FIELD_META_DATA,
      _Fields.CREATETIME to CREATETIME_FIELD_META_DATA,
      _Fields.PHOTO_TID_ALBUM to PHOTO_TID_ALBUM_FIELD_META_DATA,
      _Fields.EXTEND to EXTEND_FIELD_META_DATA,
      _Fields.EXTRA to EXTRA_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimUserBean::class.java, metadata)
    }
  }

  private object TimUserBeanStandardScheme : org.apache.thrift.scheme.StandardScheme<TimUserBean>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimUserBean) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.name = readString()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.nickName = readString()
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.brithday = readString()
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BYTE) {
                    struct.gender = readByte()
                  } else {
                    skipNext()
                  }
                }
                6 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.cover = readString()
                  } else {
                    skipNext()
                  }
                }
                7 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.area = readString()
                  } else {
                    skipNext()
                  }
                }
                8 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.createtime = readI64()
                  } else {
                    skipNext()
                  }
                }
                9 -> {
                  if (it.type == org.apache.thrift.protocol.TType.LIST) {
                    struct.photoTidAlbum = readList { tlist ->
                      kotlin.collections.List(tlist.size) {
                        readString()
                      }
                    }
                  } else {
                    skipNext()
                  }
                }
                10 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extend = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to readString()
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                11 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extra = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to org.apache.thrift.TBaseHelper.byteBufferToByteArray(readBinary())
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimUserBean) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.name?.let { name ->
            writeField(NAME_FIELD_DESC) {
              writeString(name)
            }
          }
          struct.nickName?.let { nickName ->
            writeField(NICK_NAME_FIELD_DESC) {
              writeString(nickName)
            }
          }
          struct.brithday?.let { brithday ->
            writeField(BRITHDAY_FIELD_DESC) {
              writeString(brithday)
            }
          }
          struct.gender?.let { gender ->
            writeField(GENDER_FIELD_DESC) {
              writeByte(gender)
            }
          }
          struct.cover?.let { cover ->
            writeField(COVER_FIELD_DESC) {
              writeString(cover)
            }
          }
          struct.area?.let { area ->
            writeField(AREA_FIELD_DESC) {
              writeString(area)
            }
          }
          struct.createtime?.let { createtime ->
            writeField(CREATETIME_FIELD_DESC) {
              writeI64(createtime)
            }
          }
          struct.photoTidAlbum?.let { photoTidAlbum ->
            writeField(PHOTO_TID_ALBUM_FIELD_DESC) {
              writeList(org.apache.thrift.protocol.TType.STRING, photoTidAlbum) {
                writeString(it)
              }
            }
          }
          struct.extend?.let { extend ->
            writeField(EXTEND_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extend) { (key, value) ->
                writeString(key)
                writeString(value)
              }
            }
          }
          struct.extra?.let { extra ->
            writeField(EXTRA_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extra) { (key, value) ->
                writeString(key)
                writeBinary(java.nio.ByteBuffer.wrap(value))
              }
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimUserBean?): kotlin.Int {
    val comparator = compareBy<TimUserBean> { it::class.java.name }
      .thenBy { it.name } 
      .thenBy { it.nickName } 
      .thenBy { it.brithday } 
      .thenBy { it.gender } 
      .thenBy { it.cover } 
      .thenBy { it.area } 
      .thenBy { it.createtime } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.photoTidAlbum } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extend } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extra } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.NAME -> this.name
      _Fields.NICK_NAME -> this.nickName
      _Fields.BRITHDAY -> this.brithday
      _Fields.GENDER -> this.gender
      _Fields.COVER -> this.cover
      _Fields.AREA -> this.area
      _Fields.CREATETIME -> this.createtime
      _Fields.PHOTO_TID_ALBUM -> this.photoTidAlbum
      _Fields.EXTEND -> this.extend
      _Fields.EXTRA -> this.extra
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.NAME -> this.name = value as kotlin.String?
      _Fields.NICK_NAME -> this.nickName = value as kotlin.String?
      _Fields.BRITHDAY -> this.brithday = value as kotlin.String?
      _Fields.GENDER -> this.gender = value as kotlin.Byte?
      _Fields.COVER -> this.cover = value as kotlin.String?
      _Fields.AREA -> this.area = value as kotlin.String?
      _Fields.CREATETIME -> this.createtime = value as kotlin.Long?
      _Fields.PHOTO_TID_ALBUM -> this.photoTidAlbum = value as kotlin.collections.List<kotlin.String>?
      _Fields.EXTEND -> this.extend = value as kotlin.collections.Map<kotlin.String, kotlin.String>?
      _Fields.EXTRA -> this.extra = value as kotlin.collections.Map<kotlin.String, kotlin.ByteArray>?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.NAME -> this.name != null
      _Fields.NICK_NAME -> this.nickName != null
      _Fields.BRITHDAY -> this.brithday != null
      _Fields.GENDER -> this.gender != null
      _Fields.COVER -> this.cover != null
      _Fields.AREA -> this.area != null
      _Fields.CREATETIME -> this.createtime != null
      _Fields.PHOTO_TID_ALBUM -> this.photoTidAlbum != null
      _Fields.EXTEND -> this.extend != null
      _Fields.EXTRA -> this.extra != null
    }
  }

  override fun deepCopy(): TimUserBean {
    return TimUserBean (
      name,
      nickName,
      brithday,
      gender,
      cover,
      area,
      createtime,
      photoTidAlbum,
      extend,
      extra,
    )
  }

  override fun clear(): kotlin.Unit {
    name = null
    nickName = null
    brithday = null
    gender = null
    cover = null
    area = null
    createtime = null
    photoTidAlbum = null
    extend = null
    extra = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimUserBeanStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimUserBeanStandardScheme.write(oproto, this)
  }

}
