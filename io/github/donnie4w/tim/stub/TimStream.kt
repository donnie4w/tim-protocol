/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimStream(
  private var _id: kotlin.Long? = null,
  private var _VNode: kotlin.String? = null,
  var dtype: kotlin.Byte? = null,
  var body: kotlin.ByteArray? = null,
  private var _fromNode: kotlin.String? = null
) : org.apache.thrift.TBase<TimStream, TimStream._Fields> {
  val id: kotlin.Long get() = _id!!
  val VNode: kotlin.String get() = _VNode!!
  val fromNode: kotlin.String get() = _fromNode!!
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    ID(1, "id"),
    VNODE(2, "VNode"),
    DTYPE(3, "dtype"),
    BODY(4, "body"),
    FROM_NODE(5, "fromNode");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> ID
          2 -> VNODE
          3 -> DTYPE
          4 -> BODY
          5 -> FROM_NODE
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "id" -> ID
          "VNode" -> VNODE
          "dtype" -> DTYPE
          "body" -> BODY
          "fromNode" -> FROM_NODE
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimStream")
    private val ID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, 1)
    private val ID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "id",
      org.apache.thrift.TFieldRequirementType.REQUIRED,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val VNODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("VNode", org.apache.thrift.protocol.TType.STRING, 2)
    private val VNODE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "VNode",
      org.apache.thrift.TFieldRequirementType.REQUIRED,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val DTYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("dtype", org.apache.thrift.protocol.TType.BYTE, 3)
    private val DTYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "dtype",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
      emptyMap())
    private val BODY_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, 4)
    private val BODY_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "body",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true),
      emptyMap())
    private val FROM_NODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("fromNode", org.apache.thrift.protocol.TType.STRING, 5)
    private val FROM_NODE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "fromNode",
      org.apache.thrift.TFieldRequirementType.REQUIRED,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.ID to ID_FIELD_META_DATA,
      _Fields.VNODE to VNODE_FIELD_META_DATA,
      _Fields.DTYPE to DTYPE_FIELD_META_DATA,
      _Fields.BODY to BODY_FIELD_META_DATA,
      _Fields.FROM_NODE to FROM_NODE_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimStream::class.java, metadata)
    }
  }

  private object TimStreamStandardScheme : org.apache.thrift.scheme.StandardScheme<TimStream>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimStream) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct._id = readI64()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct._VNode = readString()
                  } else {
                    skipNext()
                  }
                }
                3 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BYTE) {
                    struct.dtype = readByte()
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.body = org.apache.thrift.TBaseHelper.byteBufferToByteArray(readBinary())
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct._fromNode = readString()
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimStream) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.id.let { id ->
            writeField(ID_FIELD_DESC) {
              writeI64(id)
            }
          }
          struct.VNode.let { VNode ->
            writeField(VNODE_FIELD_DESC) {
              writeString(VNode)
            }
          }
          struct.dtype?.let { dtype ->
            writeField(DTYPE_FIELD_DESC) {
              writeByte(dtype)
            }
          }
          struct.body?.let { body ->
            writeField(BODY_FIELD_DESC) {
              writeBinary(java.nio.ByteBuffer.wrap(body))
            }
          }
          struct.fromNode.let { fromNode ->
            writeField(FROM_NODE_FIELD_DESC) {
              writeString(fromNode)
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimStream?): kotlin.Int {
    val comparator = compareBy<TimStream> { it::class.java.name }
      .thenBy { it.id } 
      .thenBy { it.VNode } 
      .thenBy { it.dtype } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.body } 
      .thenBy { it.fromNode } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.ID -> this.id
      _Fields.VNODE -> this.VNode
      _Fields.DTYPE -> this.dtype
      _Fields.BODY -> this.body
      _Fields.FROM_NODE -> this.fromNode
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.ID -> this._id = value as kotlin.Long?
      _Fields.VNODE -> this._VNode = value as kotlin.String?
      _Fields.DTYPE -> this.dtype = value as kotlin.Byte?
      _Fields.BODY -> this.body = value as kotlin.ByteArray?
      _Fields.FROM_NODE -> this._fromNode = value as kotlin.String?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.ID -> this._id != null
      _Fields.VNODE -> this._VNode != null
      _Fields.DTYPE -> this.dtype != null
      _Fields.BODY -> this.body != null
      _Fields.FROM_NODE -> this._fromNode != null
    }
  }

  override fun deepCopy(): TimStream {
    return TimStream (
      id,
      VNode,
      dtype,
      body,
      fromNode,
    )
  }

  override fun clear(): kotlin.Unit {
    _id = null
    _VNode = null
    dtype = null
    body = null
    _fromNode = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
    if (_id == null) {
      throw org.apache.thrift.TException("Required field `id' is null, struct is: $this")
    }
    if (_VNode == null) {
      throw org.apache.thrift.TException("Required field `VNode' is null, struct is: $this")
    }
    if (_fromNode == null) {
      throw org.apache.thrift.TException("Required field `fromNode' is null, struct is: $this")
    }
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimStreamStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimStreamStandardScheme.write(oproto, this)
  }

}
