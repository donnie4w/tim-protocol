/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimPresence(
  var id: kotlin.Long? = null,
  var offline: kotlin.Boolean? = null,
  var subStatus: kotlin.Byte? = null,
  var fromTid: Tid? = null,
  var toTid: Tid? = null,
  var toList: kotlin.collections.List<kotlin.String>? = null,
  var show: kotlin.Short? = null,
  var status: kotlin.String? = null,
  var extend: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,
  var extra: kotlin.collections.Map<kotlin.String, kotlin.ByteArray>? = null
) : org.apache.thrift.TBase<TimPresence, TimPresence._Fields> {
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    ID(1, "id"),
    OFFLINE(2, "offline"),
    SUB_STATUS(3, "subStatus"),
    FROM_TID(4, "fromTid"),
    TO_TID(5, "toTid"),
    TO_LIST(6, "toList"),
    SHOW(7, "show"),
    STATUS(8, "status"),
    EXTEND(9, "extend"),
    EXTRA(10, "extra");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> ID
          2 -> OFFLINE
          3 -> SUB_STATUS
          4 -> FROM_TID
          5 -> TO_TID
          6 -> TO_LIST
          7 -> SHOW
          8 -> STATUS
          9 -> EXTEND
          10 -> EXTRA
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "id" -> ID
          "offline" -> OFFLINE
          "subStatus" -> SUB_STATUS
          "fromTid" -> FROM_TID
          "toTid" -> TO_TID
          "toList" -> TO_LIST
          "show" -> SHOW
          "status" -> STATUS
          "extend" -> EXTEND
          "extra" -> EXTRA
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimPresence")
    private val ID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, 1)
    private val ID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "id",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val OFFLINE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("offline", org.apache.thrift.protocol.TType.BOOL, 2)
    private val OFFLINE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "offline",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL),
      emptyMap())
    private val SUB_STATUS_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("subStatus", org.apache.thrift.protocol.TType.BYTE, 3)
    private val SUB_STATUS_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "subStatus",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
      emptyMap())
    private val FROM_TID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, 4)
    private val FROM_TID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "fromTid",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid::class.java),
      emptyMap())
    private val TO_TID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, 5)
    private val TO_TID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "toTid",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid::class.java),
      emptyMap())
    private val TO_LIST_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("toList", org.apache.thrift.protocol.TType.LIST, 6)
    private val TO_LIST_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "toList",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val SHOW_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("show", org.apache.thrift.protocol.TType.I16, 7)
    private val SHOW_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "show",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
      emptyMap())
    private val STATUS_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, 8)
    private val STATUS_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "status",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val EXTEND_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, 9)
    private val EXTEND_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extend",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val EXTRA_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, 10)
    private val EXTRA_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extra",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.ID to ID_FIELD_META_DATA,
      _Fields.OFFLINE to OFFLINE_FIELD_META_DATA,
      _Fields.SUB_STATUS to SUB_STATUS_FIELD_META_DATA,
      _Fields.FROM_TID to FROM_TID_FIELD_META_DATA,
      _Fields.TO_TID to TO_TID_FIELD_META_DATA,
      _Fields.TO_LIST to TO_LIST_FIELD_META_DATA,
      _Fields.SHOW to SHOW_FIELD_META_DATA,
      _Fields.STATUS to STATUS_FIELD_META_DATA,
      _Fields.EXTEND to EXTEND_FIELD_META_DATA,
      _Fields.EXTRA to EXTRA_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimPresence::class.java, metadata)
    }
  }

  private object TimPresenceStandardScheme : org.apache.thrift.scheme.StandardScheme<TimPresence>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimPresence) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.id = readI64()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BOOL) {
                    struct.offline = readBool()
                  } else {
                    skipNext()
                  }
                }
                3 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BYTE) {
                    struct.subStatus = readByte()
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRUCT) {
                    struct.fromTid = Tid().apply { read(iproto) }
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRUCT) {
                    struct.toTid = Tid().apply { read(iproto) }
                  } else {
                    skipNext()
                  }
                }
                6 -> {
                  if (it.type == org.apache.thrift.protocol.TType.LIST) {
                    struct.toList = readList { tlist ->
                      kotlin.collections.List(tlist.size) {
                        readString()
                      }
                    }
                  } else {
                    skipNext()
                  }
                }
                7 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I16) {
                    struct.show = readI16()
                  } else {
                    skipNext()
                  }
                }
                8 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.status = readString()
                  } else {
                    skipNext()
                  }
                }
                9 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extend = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to readString()
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                10 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extra = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to org.apache.thrift.TBaseHelper.byteBufferToByteArray(readBinary())
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimPresence) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.id?.let { id ->
            writeField(ID_FIELD_DESC) {
              writeI64(id)
            }
          }
          struct.offline?.let { offline ->
            writeField(OFFLINE_FIELD_DESC) {
              writeBool(offline)
            }
          }
          struct.subStatus?.let { subStatus ->
            writeField(SUB_STATUS_FIELD_DESC) {
              writeByte(subStatus)
            }
          }
          struct.fromTid?.let { fromTid ->
            writeField(FROM_TID_FIELD_DESC) {
              fromTid.write(this)
            }
          }
          struct.toTid?.let { toTid ->
            writeField(TO_TID_FIELD_DESC) {
              toTid.write(this)
            }
          }
          struct.toList?.let { toList ->
            writeField(TO_LIST_FIELD_DESC) {
              writeList(org.apache.thrift.protocol.TType.STRING, toList) {
                writeString(it)
              }
            }
          }
          struct.show?.let { show ->
            writeField(SHOW_FIELD_DESC) {
              writeI16(show)
            }
          }
          struct.status?.let { status ->
            writeField(STATUS_FIELD_DESC) {
              writeString(status)
            }
          }
          struct.extend?.let { extend ->
            writeField(EXTEND_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extend) { (key, value) ->
                writeString(key)
                writeString(value)
              }
            }
          }
          struct.extra?.let { extra ->
            writeField(EXTRA_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extra) { (key, value) ->
                writeString(key)
                writeBinary(java.nio.ByteBuffer.wrap(value))
              }
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimPresence?): kotlin.Int {
    val comparator = compareBy<TimPresence> { it::class.java.name }
      .thenBy { it.id } 
      .thenBy { it.offline } 
      .thenBy { it.subStatus } 
      .thenBy { it.fromTid } 
      .thenBy { it.toTid } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.toList } 
      .thenBy { it.show } 
      .thenBy { it.status } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extend } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extra } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.ID -> this.id
      _Fields.OFFLINE -> this.offline
      _Fields.SUB_STATUS -> this.subStatus
      _Fields.FROM_TID -> this.fromTid
      _Fields.TO_TID -> this.toTid
      _Fields.TO_LIST -> this.toList
      _Fields.SHOW -> this.show
      _Fields.STATUS -> this.status
      _Fields.EXTEND -> this.extend
      _Fields.EXTRA -> this.extra
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.ID -> this.id = value as kotlin.Long?
      _Fields.OFFLINE -> this.offline = value as kotlin.Boolean?
      _Fields.SUB_STATUS -> this.subStatus = value as kotlin.Byte?
      _Fields.FROM_TID -> this.fromTid = value as Tid?
      _Fields.TO_TID -> this.toTid = value as Tid?
      _Fields.TO_LIST -> this.toList = value as kotlin.collections.List<kotlin.String>?
      _Fields.SHOW -> this.show = value as kotlin.Short?
      _Fields.STATUS -> this.status = value as kotlin.String?
      _Fields.EXTEND -> this.extend = value as kotlin.collections.Map<kotlin.String, kotlin.String>?
      _Fields.EXTRA -> this.extra = value as kotlin.collections.Map<kotlin.String, kotlin.ByteArray>?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.ID -> this.id != null
      _Fields.OFFLINE -> this.offline != null
      _Fields.SUB_STATUS -> this.subStatus != null
      _Fields.FROM_TID -> this.fromTid != null
      _Fields.TO_TID -> this.toTid != null
      _Fields.TO_LIST -> this.toList != null
      _Fields.SHOW -> this.show != null
      _Fields.STATUS -> this.status != null
      _Fields.EXTEND -> this.extend != null
      _Fields.EXTRA -> this.extra != null
    }
  }

  override fun deepCopy(): TimPresence {
    return TimPresence (
      id,
      offline,
      subStatus,
      fromTid,
      toTid,
      toList,
      show,
      status,
      extend,
      extra,
    )
  }

  override fun clear(): kotlin.Unit {
    id = null
    offline = null
    subStatus = null
    fromTid = null
    toTid = null
    toList = null
    show = null
    status = null
    extend = null
    extra = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimPresenceStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimPresenceStandardScheme.write(oproto, this)
  }

}
