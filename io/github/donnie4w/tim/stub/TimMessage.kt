/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimMessage(
  private var _msType: kotlin.Byte? = null,
  private var _odType: kotlin.Byte? = null,
  var id: kotlin.Long? = null,
  var mid: kotlin.Long? = null,
  var bnType: kotlin.Int? = null,
  var fromTid: Tid? = null,
  var toTid: Tid? = null,
  var roomTid: Tid? = null,
  var dataBinary: kotlin.ByteArray? = null,
  var dataString: kotlin.String? = null,
  var isOffline: kotlin.Boolean? = null,
  var timestamp: kotlin.Long? = null,
  var udtype: kotlin.Short? = null,
  var udshow: kotlin.Short? = null,
  var extend: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,
  var extra: kotlin.collections.Map<kotlin.String, kotlin.ByteArray>? = null
) : org.apache.thrift.TBase<TimMessage, TimMessage._Fields> {
  val msType: kotlin.Byte get() = _msType!!
  val odType: kotlin.Byte get() = _odType!!
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    MS_TYPE(1, "msType"),
    OD_TYPE(2, "odType"),
    ID(3, "id"),
    MID(4, "mid"),
    BN_TYPE(5, "bnType"),
    FROM_TID(6, "fromTid"),
    TO_TID(7, "toTid"),
    ROOM_TID(8, "roomTid"),
    DATA_BINARY(9, "dataBinary"),
    DATA_STRING(10, "dataString"),
    IS_OFFLINE(11, "isOffline"),
    TIMESTAMP(12, "timestamp"),
    UDTYPE(13, "udtype"),
    UDSHOW(14, "udshow"),
    EXTEND(15, "extend"),
    EXTRA(16, "extra");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> MS_TYPE
          2 -> OD_TYPE
          3 -> ID
          4 -> MID
          5 -> BN_TYPE
          6 -> FROM_TID
          7 -> TO_TID
          8 -> ROOM_TID
          9 -> DATA_BINARY
          10 -> DATA_STRING
          11 -> IS_OFFLINE
          12 -> TIMESTAMP
          13 -> UDTYPE
          14 -> UDSHOW
          15 -> EXTEND
          16 -> EXTRA
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "msType" -> MS_TYPE
          "odType" -> OD_TYPE
          "id" -> ID
          "mid" -> MID
          "bnType" -> BN_TYPE
          "fromTid" -> FROM_TID
          "toTid" -> TO_TID
          "roomTid" -> ROOM_TID
          "dataBinary" -> DATA_BINARY
          "dataString" -> DATA_STRING
          "isOffline" -> IS_OFFLINE
          "timestamp" -> TIMESTAMP
          "udtype" -> UDTYPE
          "udshow" -> UDSHOW
          "extend" -> EXTEND
          "extra" -> EXTRA
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimMessage")
    private val MS_TYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("msType", org.apache.thrift.protocol.TType.BYTE, 1)
    private val MS_TYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "msType",
      org.apache.thrift.TFieldRequirementType.REQUIRED,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
      emptyMap())
    private val OD_TYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("odType", org.apache.thrift.protocol.TType.BYTE, 2)
    private val OD_TYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "odType",
      org.apache.thrift.TFieldRequirementType.REQUIRED,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
      emptyMap())
    private val ID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, 3)
    private val ID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "id",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val MID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.I64, 4)
    private val MID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "mid",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val BN_TYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("bnType", org.apache.thrift.protocol.TType.I32, 5)
    private val BN_TYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "bnType",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
      emptyMap())
    private val FROM_TID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, 6)
    private val FROM_TID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "fromTid",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid::class.java),
      emptyMap())
    private val TO_TID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, 7)
    private val TO_TID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "toTid",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid::class.java),
      emptyMap())
    private val ROOM_TID_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("roomTid", org.apache.thrift.protocol.TType.STRUCT, 8)
    private val ROOM_TID_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "roomTid",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid::class.java),
      emptyMap())
    private val DATA_BINARY_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("dataBinary", org.apache.thrift.protocol.TType.STRING, 9)
    private val DATA_BINARY_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "dataBinary",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true),
      emptyMap())
    private val DATA_STRING_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("dataString", org.apache.thrift.protocol.TType.STRING, 10)
    private val DATA_STRING_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "dataString",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val IS_OFFLINE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("isOffline", org.apache.thrift.protocol.TType.BOOL, 11)
    private val IS_OFFLINE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "isOffline",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL),
      emptyMap())
    private val TIMESTAMP_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, 12)
    private val TIMESTAMP_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "timestamp",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val UDTYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("udtype", org.apache.thrift.protocol.TType.I16, 13)
    private val UDTYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "udtype",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
      emptyMap())
    private val UDSHOW_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("udshow", org.apache.thrift.protocol.TType.I16, 14)
    private val UDSHOW_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "udshow",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
      emptyMap())
    private val EXTEND_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, 15)
    private val EXTEND_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extend",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val EXTRA_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, 16)
    private val EXTRA_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extra",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.MS_TYPE to MS_TYPE_FIELD_META_DATA,
      _Fields.OD_TYPE to OD_TYPE_FIELD_META_DATA,
      _Fields.ID to ID_FIELD_META_DATA,
      _Fields.MID to MID_FIELD_META_DATA,
      _Fields.BN_TYPE to BN_TYPE_FIELD_META_DATA,
      _Fields.FROM_TID to FROM_TID_FIELD_META_DATA,
      _Fields.TO_TID to TO_TID_FIELD_META_DATA,
      _Fields.ROOM_TID to ROOM_TID_FIELD_META_DATA,
      _Fields.DATA_BINARY to DATA_BINARY_FIELD_META_DATA,
      _Fields.DATA_STRING to DATA_STRING_FIELD_META_DATA,
      _Fields.IS_OFFLINE to IS_OFFLINE_FIELD_META_DATA,
      _Fields.TIMESTAMP to TIMESTAMP_FIELD_META_DATA,
      _Fields.UDTYPE to UDTYPE_FIELD_META_DATA,
      _Fields.UDSHOW to UDSHOW_FIELD_META_DATA,
      _Fields.EXTEND to EXTEND_FIELD_META_DATA,
      _Fields.EXTRA to EXTRA_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimMessage::class.java, metadata)
    }
  }

  private object TimMessageStandardScheme : org.apache.thrift.scheme.StandardScheme<TimMessage>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimMessage) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BYTE) {
                    struct._msType = readByte()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BYTE) {
                    struct._odType = readByte()
                  } else {
                    skipNext()
                  }
                }
                3 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.id = readI64()
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.mid = readI64()
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I32) {
                    struct.bnType = readI32()
                  } else {
                    skipNext()
                  }
                }
                6 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRUCT) {
                    struct.fromTid = Tid().apply { read(iproto) }
                  } else {
                    skipNext()
                  }
                }
                7 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRUCT) {
                    struct.toTid = Tid().apply { read(iproto) }
                  } else {
                    skipNext()
                  }
                }
                8 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRUCT) {
                    struct.roomTid = Tid().apply { read(iproto) }
                  } else {
                    skipNext()
                  }
                }
                9 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.dataBinary = org.apache.thrift.TBaseHelper.byteBufferToByteArray(readBinary())
                  } else {
                    skipNext()
                  }
                }
                10 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.dataString = readString()
                  } else {
                    skipNext()
                  }
                }
                11 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BOOL) {
                    struct.isOffline = readBool()
                  } else {
                    skipNext()
                  }
                }
                12 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.timestamp = readI64()
                  } else {
                    skipNext()
                  }
                }
                13 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I16) {
                    struct.udtype = readI16()
                  } else {
                    skipNext()
                  }
                }
                14 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I16) {
                    struct.udshow = readI16()
                  } else {
                    skipNext()
                  }
                }
                15 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extend = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to readString()
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                16 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extra = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to org.apache.thrift.TBaseHelper.byteBufferToByteArray(readBinary())
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimMessage) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.msType.let { msType ->
            writeField(MS_TYPE_FIELD_DESC) {
              writeByte(msType)
            }
          }
          struct.odType.let { odType ->
            writeField(OD_TYPE_FIELD_DESC) {
              writeByte(odType)
            }
          }
          struct.id?.let { id ->
            writeField(ID_FIELD_DESC) {
              writeI64(id)
            }
          }
          struct.mid?.let { mid ->
            writeField(MID_FIELD_DESC) {
              writeI64(mid)
            }
          }
          struct.bnType?.let { bnType ->
            writeField(BN_TYPE_FIELD_DESC) {
              writeI32(bnType)
            }
          }
          struct.fromTid?.let { fromTid ->
            writeField(FROM_TID_FIELD_DESC) {
              fromTid.write(this)
            }
          }
          struct.toTid?.let { toTid ->
            writeField(TO_TID_FIELD_DESC) {
              toTid.write(this)
            }
          }
          struct.roomTid?.let { roomTid ->
            writeField(ROOM_TID_FIELD_DESC) {
              roomTid.write(this)
            }
          }
          struct.dataBinary?.let { dataBinary ->
            writeField(DATA_BINARY_FIELD_DESC) {
              writeBinary(java.nio.ByteBuffer.wrap(dataBinary))
            }
          }
          struct.dataString?.let { dataString ->
            writeField(DATA_STRING_FIELD_DESC) {
              writeString(dataString)
            }
          }
          struct.isOffline?.let { isOffline ->
            writeField(IS_OFFLINE_FIELD_DESC) {
              writeBool(isOffline)
            }
          }
          struct.timestamp?.let { timestamp ->
            writeField(TIMESTAMP_FIELD_DESC) {
              writeI64(timestamp)
            }
          }
          struct.udtype?.let { udtype ->
            writeField(UDTYPE_FIELD_DESC) {
              writeI16(udtype)
            }
          }
          struct.udshow?.let { udshow ->
            writeField(UDSHOW_FIELD_DESC) {
              writeI16(udshow)
            }
          }
          struct.extend?.let { extend ->
            writeField(EXTEND_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extend) { (key, value) ->
                writeString(key)
                writeString(value)
              }
            }
          }
          struct.extra?.let { extra ->
            writeField(EXTRA_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extra) { (key, value) ->
                writeString(key)
                writeBinary(java.nio.ByteBuffer.wrap(value))
              }
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimMessage?): kotlin.Int {
    val comparator = compareBy<TimMessage> { it::class.java.name }
      .thenBy { it.msType } 
      .thenBy { it.odType } 
      .thenBy { it.id } 
      .thenBy { it.mid } 
      .thenBy { it.bnType } 
      .thenBy { it.fromTid } 
      .thenBy { it.toTid } 
      .thenBy { it.roomTid } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.dataBinary } 
      .thenBy { it.dataString } 
      .thenBy { it.isOffline } 
      .thenBy { it.timestamp } 
      .thenBy { it.udtype } 
      .thenBy { it.udshow } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extend } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extra } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.MS_TYPE -> this.msType
      _Fields.OD_TYPE -> this.odType
      _Fields.ID -> this.id
      _Fields.MID -> this.mid
      _Fields.BN_TYPE -> this.bnType
      _Fields.FROM_TID -> this.fromTid
      _Fields.TO_TID -> this.toTid
      _Fields.ROOM_TID -> this.roomTid
      _Fields.DATA_BINARY -> this.dataBinary
      _Fields.DATA_STRING -> this.dataString
      _Fields.IS_OFFLINE -> this.isOffline
      _Fields.TIMESTAMP -> this.timestamp
      _Fields.UDTYPE -> this.udtype
      _Fields.UDSHOW -> this.udshow
      _Fields.EXTEND -> this.extend
      _Fields.EXTRA -> this.extra
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.MS_TYPE -> this._msType = value as kotlin.Byte?
      _Fields.OD_TYPE -> this._odType = value as kotlin.Byte?
      _Fields.ID -> this.id = value as kotlin.Long?
      _Fields.MID -> this.mid = value as kotlin.Long?
      _Fields.BN_TYPE -> this.bnType = value as kotlin.Int?
      _Fields.FROM_TID -> this.fromTid = value as Tid?
      _Fields.TO_TID -> this.toTid = value as Tid?
      _Fields.ROOM_TID -> this.roomTid = value as Tid?
      _Fields.DATA_BINARY -> this.dataBinary = value as kotlin.ByteArray?
      _Fields.DATA_STRING -> this.dataString = value as kotlin.String?
      _Fields.IS_OFFLINE -> this.isOffline = value as kotlin.Boolean?
      _Fields.TIMESTAMP -> this.timestamp = value as kotlin.Long?
      _Fields.UDTYPE -> this.udtype = value as kotlin.Short?
      _Fields.UDSHOW -> this.udshow = value as kotlin.Short?
      _Fields.EXTEND -> this.extend = value as kotlin.collections.Map<kotlin.String, kotlin.String>?
      _Fields.EXTRA -> this.extra = value as kotlin.collections.Map<kotlin.String, kotlin.ByteArray>?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.MS_TYPE -> this._msType != null
      _Fields.OD_TYPE -> this._odType != null
      _Fields.ID -> this.id != null
      _Fields.MID -> this.mid != null
      _Fields.BN_TYPE -> this.bnType != null
      _Fields.FROM_TID -> this.fromTid != null
      _Fields.TO_TID -> this.toTid != null
      _Fields.ROOM_TID -> this.roomTid != null
      _Fields.DATA_BINARY -> this.dataBinary != null
      _Fields.DATA_STRING -> this.dataString != null
      _Fields.IS_OFFLINE -> this.isOffline != null
      _Fields.TIMESTAMP -> this.timestamp != null
      _Fields.UDTYPE -> this.udtype != null
      _Fields.UDSHOW -> this.udshow != null
      _Fields.EXTEND -> this.extend != null
      _Fields.EXTRA -> this.extra != null
    }
  }

  override fun deepCopy(): TimMessage {
    return TimMessage (
      msType,
      odType,
      id,
      mid,
      bnType,
      fromTid,
      toTid,
      roomTid,
      dataBinary,
      dataString,
      isOffline,
      timestamp,
      udtype,
      udshow,
      extend,
      extra,
    )
  }

  override fun clear(): kotlin.Unit {
    _msType = null
    _odType = null
    id = null
    mid = null
    bnType = null
    fromTid = null
    toTid = null
    roomTid = null
    dataBinary = null
    dataString = null
    isOffline = null
    timestamp = null
    udtype = null
    udshow = null
    extend = null
    extra = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
    if (_msType == null) {
      throw org.apache.thrift.TException("Required field `msType' is null, struct is: $this")
    }
    if (_odType == null) {
      throw org.apache.thrift.TException("Required field `odType' is null, struct is: $this")
    }
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimMessageStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimMessageStandardScheme.write(oproto, this)
  }

}
