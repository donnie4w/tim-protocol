/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimAuth(
  var name: kotlin.String? = null,
  var pwd: kotlin.String? = null,
  var domain: kotlin.String? = null,
  var resource: kotlin.String? = null,
  var termtyp: kotlin.Byte? = null,
  var token: kotlin.Long? = null,
  var extend: kotlin.collections.Map<kotlin.String, kotlin.String>? = null
) : org.apache.thrift.TBase<TimAuth, TimAuth._Fields> {
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    NAME(1, "name"),
    PWD(2, "pwd"),
    DOMAIN(3, "domain"),
    RESOURCE(4, "resource"),
    TERMTYP(5, "termtyp"),
    TOKEN(6, "token"),
    EXTEND(7, "extend");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> NAME
          2 -> PWD
          3 -> DOMAIN
          4 -> RESOURCE
          5 -> TERMTYP
          6 -> TOKEN
          7 -> EXTEND
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "name" -> NAME
          "pwd" -> PWD
          "domain" -> DOMAIN
          "resource" -> RESOURCE
          "termtyp" -> TERMTYP
          "token" -> TOKEN
          "extend" -> EXTEND
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimAuth")
    private val NAME_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, 1)
    private val NAME_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "name",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val PWD_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, 2)
    private val PWD_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "pwd",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val DOMAIN_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("domain", org.apache.thrift.protocol.TType.STRING, 3)
    private val DOMAIN_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "domain",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val RESOURCE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRING, 4)
    private val RESOURCE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "resource",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val TERMTYP_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("termtyp", org.apache.thrift.protocol.TType.BYTE, 5)
    private val TERMTYP_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "termtyp",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE),
      emptyMap())
    private val TOKEN_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.I64, 6)
    private val TOKEN_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "token",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val EXTEND_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("extend", org.apache.thrift.protocol.TType.MAP, 7)
    private val EXTEND_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "extend",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.NAME to NAME_FIELD_META_DATA,
      _Fields.PWD to PWD_FIELD_META_DATA,
      _Fields.DOMAIN to DOMAIN_FIELD_META_DATA,
      _Fields.RESOURCE to RESOURCE_FIELD_META_DATA,
      _Fields.TERMTYP to TERMTYP_FIELD_META_DATA,
      _Fields.TOKEN to TOKEN_FIELD_META_DATA,
      _Fields.EXTEND to EXTEND_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimAuth::class.java, metadata)
    }
  }

  private object TimAuthStandardScheme : org.apache.thrift.scheme.StandardScheme<TimAuth>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimAuth) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.name = readString()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.pwd = readString()
                  } else {
                    skipNext()
                  }
                }
                3 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.domain = readString()
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.resource = readString()
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.BYTE) {
                    struct.termtyp = readByte()
                  } else {
                    skipNext()
                  }
                }
                6 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.token = readI64()
                  } else {
                    skipNext()
                  }
                }
                7 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.extend = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to readString()
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimAuth) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.name?.let { name ->
            writeField(NAME_FIELD_DESC) {
              writeString(name)
            }
          }
          struct.pwd?.let { pwd ->
            writeField(PWD_FIELD_DESC) {
              writeString(pwd)
            }
          }
          struct.domain?.let { domain ->
            writeField(DOMAIN_FIELD_DESC) {
              writeString(domain)
            }
          }
          struct.resource?.let { resource ->
            writeField(RESOURCE_FIELD_DESC) {
              writeString(resource)
            }
          }
          struct.termtyp?.let { termtyp ->
            writeField(TERMTYP_FIELD_DESC) {
              writeByte(termtyp)
            }
          }
          struct.token?.let { token ->
            writeField(TOKEN_FIELD_DESC) {
              writeI64(token)
            }
          }
          struct.extend?.let { extend ->
            writeField(EXTEND_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, extend) { (key, value) ->
                writeString(key)
                writeString(value)
              }
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimAuth?): kotlin.Int {
    val comparator = compareBy<TimAuth> { it::class.java.name }
      .thenBy { it.name } 
      .thenBy { it.pwd } 
      .thenBy { it.domain } 
      .thenBy { it.resource } 
      .thenBy { it.termtyp } 
      .thenBy { it.token } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.extend } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.NAME -> this.name
      _Fields.PWD -> this.pwd
      _Fields.DOMAIN -> this.domain
      _Fields.RESOURCE -> this.resource
      _Fields.TERMTYP -> this.termtyp
      _Fields.TOKEN -> this.token
      _Fields.EXTEND -> this.extend
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.NAME -> this.name = value as kotlin.String?
      _Fields.PWD -> this.pwd = value as kotlin.String?
      _Fields.DOMAIN -> this.domain = value as kotlin.String?
      _Fields.RESOURCE -> this.resource = value as kotlin.String?
      _Fields.TERMTYP -> this.termtyp = value as kotlin.Byte?
      _Fields.TOKEN -> this.token = value as kotlin.Long?
      _Fields.EXTEND -> this.extend = value as kotlin.collections.Map<kotlin.String, kotlin.String>?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.NAME -> this.name != null
      _Fields.PWD -> this.pwd != null
      _Fields.DOMAIN -> this.domain != null
      _Fields.RESOURCE -> this.resource != null
      _Fields.TERMTYP -> this.termtyp != null
      _Fields.TOKEN -> this.token != null
      _Fields.EXTEND -> this.extend != null
    }
  }

  override fun deepCopy(): TimAuth {
    return TimAuth (
      name,
      pwd,
      domain,
      resource,
      termtyp,
      token,
      extend,
    )
  }

  override fun clear(): kotlin.Unit {
    name = null
    pwd = null
    domain = null
    resource = null
    termtyp = null
    token = null
    extend = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimAuthStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimAuthStandardScheme.write(oproto, this)
  }

}
