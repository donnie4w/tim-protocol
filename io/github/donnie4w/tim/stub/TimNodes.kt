/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimNodes(
  private var _ntype: kotlin.Int? = null,
  var nodelist: kotlin.collections.List<kotlin.String>? = null,
  var usermap: kotlin.collections.Map<kotlin.String, TimUserBean>? = null,
  var roommap: kotlin.collections.Map<kotlin.String, TimRoomBean>? = null,
  var node: kotlin.String? = null
) : org.apache.thrift.TBase<TimNodes, TimNodes._Fields> {
  val ntype: kotlin.Int get() = _ntype!!
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    NTYPE(1, "ntype"),
    NODELIST(2, "nodelist"),
    USERMAP(3, "usermap"),
    ROOMMAP(4, "roommap"),
    NODE(5, "node");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> NTYPE
          2 -> NODELIST
          3 -> USERMAP
          4 -> ROOMMAP
          5 -> NODE
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "ntype" -> NTYPE
          "nodelist" -> NODELIST
          "usermap" -> USERMAP
          "roommap" -> ROOMMAP
          "node" -> NODE
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimNodes")
    private val NTYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("ntype", org.apache.thrift.protocol.TType.I32, 1)
    private val NTYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "ntype",
      org.apache.thrift.TFieldRequirementType.REQUIRED,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
      emptyMap())
    private val NODELIST_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("nodelist", org.apache.thrift.protocol.TType.LIST, 2)
    private val NODELIST_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "nodelist",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)),
      emptyMap())
    private val USERMAP_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("usermap", org.apache.thrift.protocol.TType.MAP, 3)
    private val USERMAP_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "usermap",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimUserBean::class.java)),
      emptyMap())
    private val ROOMMAP_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("roommap", org.apache.thrift.protocol.TType.MAP, 4)
    private val ROOMMAP_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "roommap",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
        org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
        org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimRoomBean::class.java)),
      emptyMap())
    private val NODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRING, 5)
    private val NODE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "node",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.NTYPE to NTYPE_FIELD_META_DATA,
      _Fields.NODELIST to NODELIST_FIELD_META_DATA,
      _Fields.USERMAP to USERMAP_FIELD_META_DATA,
      _Fields.ROOMMAP to ROOMMAP_FIELD_META_DATA,
      _Fields.NODE to NODE_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimNodes::class.java, metadata)
    }
  }

  private object TimNodesStandardScheme : org.apache.thrift.scheme.StandardScheme<TimNodes>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimNodes) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I32) {
                    struct._ntype = readI32()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.LIST) {
                    struct.nodelist = readList { tlist ->
                      kotlin.collections.List(tlist.size) {
                        readString()
                      }
                    }
                  } else {
                    skipNext()
                  }
                }
                3 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.usermap = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to TimUserBean().apply { read(iproto) }
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.MAP) {
                    struct.roommap = readMap { tmap ->
                      kotlin.collections.List(tmap.size) {
                        readString() to TimRoomBean().apply { read(iproto) }
                      }.associate { it }
                    }
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.node = readString()
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimNodes) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.ntype.let { ntype ->
            writeField(NTYPE_FIELD_DESC) {
              writeI32(ntype)
            }
          }
          struct.nodelist?.let { nodelist ->
            writeField(NODELIST_FIELD_DESC) {
              writeList(org.apache.thrift.protocol.TType.STRING, nodelist) {
                writeString(it)
              }
            }
          }
          struct.usermap?.let { usermap ->
            writeField(USERMAP_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, usermap) { (key, value) ->
                writeString(key)
                value.write(this)
              }
            }
          }
          struct.roommap?.let { roommap ->
            writeField(ROOMMAP_FIELD_DESC) {
              writeMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, roommap) { (key, value) ->
                writeString(key)
                value.write(this)
              }
            }
          }
          struct.node?.let { node ->
            writeField(NODE_FIELD_DESC) {
              writeString(node)
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimNodes?): kotlin.Int {
    val comparator = compareBy<TimNodes> { it::class.java.name }
      .thenBy { it.ntype } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.nodelist } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.usermap } 
      .thenBy(org.apache.thrift.TBaseHelper::compareTo) { it.roommap } 
      .thenBy { it.node } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.NTYPE -> this.ntype
      _Fields.NODELIST -> this.nodelist
      _Fields.USERMAP -> this.usermap
      _Fields.ROOMMAP -> this.roommap
      _Fields.NODE -> this.node
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.NTYPE -> this._ntype = value as kotlin.Int?
      _Fields.NODELIST -> this.nodelist = value as kotlin.collections.List<kotlin.String>?
      _Fields.USERMAP -> this.usermap = value as kotlin.collections.Map<kotlin.String, TimUserBean>?
      _Fields.ROOMMAP -> this.roommap = value as kotlin.collections.Map<kotlin.String, TimRoomBean>?
      _Fields.NODE -> this.node = value as kotlin.String?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.NTYPE -> this._ntype != null
      _Fields.NODELIST -> this.nodelist != null
      _Fields.USERMAP -> this.usermap != null
      _Fields.ROOMMAP -> this.roommap != null
      _Fields.NODE -> this.node != null
    }
  }

  override fun deepCopy(): TimNodes {
    return TimNodes (
      ntype,
      nodelist,
      usermap,
      roommap,
      node,
    )
  }

  override fun clear(): kotlin.Unit {
    _ntype = null
    nodelist = null
    usermap = null
    roommap = null
    node = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
    if (_ntype == null) {
      throw org.apache.thrift.TException("Required field `ntype' is null, struct is: $this")
    }
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimNodesStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimNodesStandardScheme.write(oproto, this)
  }

}
