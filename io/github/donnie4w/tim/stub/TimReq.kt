/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimReq(
  var rtype: kotlin.Int? = null,
  var node: kotlin.String? = null,
  var node2: kotlin.String? = null,
  var reqInt: kotlin.Long? = null,
  var reqInt2: kotlin.Long? = null,
  var reqStr: kotlin.String? = null,
  var reqStr2: kotlin.String? = null
) : org.apache.thrift.TBase<TimReq, TimReq._Fields> {
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    RTYPE(1, "rtype"),
    NODE(2, "node"),
    NODE2(3, "node2"),
    REQ_INT(4, "reqInt"),
    REQ_INT2(5, "reqInt2"),
    REQ_STR(6, "reqStr"),
    REQ_STR2(7, "reqStr2");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> RTYPE
          2 -> NODE
          3 -> NODE2
          4 -> REQ_INT
          5 -> REQ_INT2
          6 -> REQ_STR
          7 -> REQ_STR2
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "rtype" -> RTYPE
          "node" -> NODE
          "node2" -> NODE2
          "reqInt" -> REQ_INT
          "reqInt2" -> REQ_INT2
          "reqStr" -> REQ_STR
          "reqStr2" -> REQ_STR2
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimReq")
    private val RTYPE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("rtype", org.apache.thrift.protocol.TType.I32, 1)
    private val RTYPE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "rtype",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
      emptyMap())
    private val NODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRING, 2)
    private val NODE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "node",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val NODE2_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("node2", org.apache.thrift.protocol.TType.STRING, 3)
    private val NODE2_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "node2",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val REQ_INT_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("reqInt", org.apache.thrift.protocol.TType.I64, 4)
    private val REQ_INT_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "reqInt",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val REQ_INT2_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("reqInt2", org.apache.thrift.protocol.TType.I64, 5)
    private val REQ_INT2_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "reqInt2",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64),
      emptyMap())
    private val REQ_STR_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("reqStr", org.apache.thrift.protocol.TType.STRING, 6)
    private val REQ_STR_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "reqStr",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val REQ_STR2_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("reqStr2", org.apache.thrift.protocol.TType.STRING, 7)
    private val REQ_STR2_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "reqStr2",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.RTYPE to RTYPE_FIELD_META_DATA,
      _Fields.NODE to NODE_FIELD_META_DATA,
      _Fields.NODE2 to NODE2_FIELD_META_DATA,
      _Fields.REQ_INT to REQ_INT_FIELD_META_DATA,
      _Fields.REQ_INT2 to REQ_INT2_FIELD_META_DATA,
      _Fields.REQ_STR to REQ_STR_FIELD_META_DATA,
      _Fields.REQ_STR2 to REQ_STR2_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimReq::class.java, metadata)
    }
  }

  private object TimReqStandardScheme : org.apache.thrift.scheme.StandardScheme<TimReq>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimReq) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I32) {
                    struct.rtype = readI32()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.node = readString()
                  } else {
                    skipNext()
                  }
                }
                3 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.node2 = readString()
                  } else {
                    skipNext()
                  }
                }
                4 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.reqInt = readI64()
                  } else {
                    skipNext()
                  }
                }
                5 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I64) {
                    struct.reqInt2 = readI64()
                  } else {
                    skipNext()
                  }
                }
                6 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.reqStr = readString()
                  } else {
                    skipNext()
                  }
                }
                7 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.reqStr2 = readString()
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimReq) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.rtype?.let { rtype ->
            writeField(RTYPE_FIELD_DESC) {
              writeI32(rtype)
            }
          }
          struct.node?.let { node ->
            writeField(NODE_FIELD_DESC) {
              writeString(node)
            }
          }
          struct.node2?.let { node2 ->
            writeField(NODE2_FIELD_DESC) {
              writeString(node2)
            }
          }
          struct.reqInt?.let { reqInt ->
            writeField(REQ_INT_FIELD_DESC) {
              writeI64(reqInt)
            }
          }
          struct.reqInt2?.let { reqInt2 ->
            writeField(REQ_INT2_FIELD_DESC) {
              writeI64(reqInt2)
            }
          }
          struct.reqStr?.let { reqStr ->
            writeField(REQ_STR_FIELD_DESC) {
              writeString(reqStr)
            }
          }
          struct.reqStr2?.let { reqStr2 ->
            writeField(REQ_STR2_FIELD_DESC) {
              writeString(reqStr2)
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimReq?): kotlin.Int {
    val comparator = compareBy<TimReq> { it::class.java.name }
      .thenBy { it.rtype } 
      .thenBy { it.node } 
      .thenBy { it.node2 } 
      .thenBy { it.reqInt } 
      .thenBy { it.reqInt2 } 
      .thenBy { it.reqStr } 
      .thenBy { it.reqStr2 } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.RTYPE -> this.rtype
      _Fields.NODE -> this.node
      _Fields.NODE2 -> this.node2
      _Fields.REQ_INT -> this.reqInt
      _Fields.REQ_INT2 -> this.reqInt2
      _Fields.REQ_STR -> this.reqStr
      _Fields.REQ_STR2 -> this.reqStr2
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.RTYPE -> this.rtype = value as kotlin.Int?
      _Fields.NODE -> this.node = value as kotlin.String?
      _Fields.NODE2 -> this.node2 = value as kotlin.String?
      _Fields.REQ_INT -> this.reqInt = value as kotlin.Long?
      _Fields.REQ_INT2 -> this.reqInt2 = value as kotlin.Long?
      _Fields.REQ_STR -> this.reqStr = value as kotlin.String?
      _Fields.REQ_STR2 -> this.reqStr2 = value as kotlin.String?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.RTYPE -> this.rtype != null
      _Fields.NODE -> this.node != null
      _Fields.NODE2 -> this.node2 != null
      _Fields.REQ_INT -> this.reqInt != null
      _Fields.REQ_INT2 -> this.reqInt2 != null
      _Fields.REQ_STR -> this.reqStr != null
      _Fields.REQ_STR2 -> this.reqStr2 != null
    }
  }

  override fun deepCopy(): TimReq {
    return TimReq (
      rtype,
      node,
      node2,
      reqInt,
      reqInt2,
      reqStr,
      reqStr2,
    )
  }

  override fun clear(): kotlin.Unit {
    rtype = null
    node = null
    node2 = null
    reqInt = null
    reqInt2 = null
    reqStr = null
    reqStr2 = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimReqStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimReqStandardScheme.write(oproto, this)
  }

}
