/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@file:Suppress("ClassName", "PropertyName", "RedundantUnitReturnType", "NestedLambdaShadowedImplicitParameter", "RemoveRedundantQualifierName")
package io.github.donnie4w.tim.stub

data class TimError(
  var code: kotlin.Int? = null,
  var info: kotlin.String? = null
) : org.apache.thrift.TBase<TimError, TimError._Fields> {
  enum class _Fields(private val thriftFieldId: kotlin.Short, private val fieldName: kotlin.String) : org.apache.thrift.TFieldIdEnum {
    CODE(1, "code"),
    INFO(2, "info");

    override fun getThriftFieldId() = thriftFieldId

    override fun getFieldName() = fieldName

    companion object {
      @kotlin.jvm.JvmStatic
      fun findByValue(value: kotlin.Int): _Fields? {
        return when (value) {
          1 -> CODE
          2 -> INFO
          else -> null
        }
      }

      @kotlin.jvm.JvmStatic
      fun findByName(name: kotlin.String): _Fields? {
        return when (name) {
          "code" -> CODE
          "info" -> INFO
          else -> null
        }
      }
    }
  }

  companion object {
    private val STRUCT_DESC: org.apache.thrift.protocol.TStruct = org.apache.thrift.protocol.TStruct("TimError")
    private val CODE_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, 1)
    private val CODE_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "code",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32),
      emptyMap())
    private val INFO_FIELD_DESC: org.apache.thrift.protocol.TField = org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRING, 2)
    private val INFO_FIELD_META_DATA: org.apache.thrift.meta_data.FieldMetaData = org.apache.thrift.meta_data.FieldMetaData(
      "info",
      org.apache.thrift.TFieldRequirementType.OPTIONAL,
      org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
      emptyMap())
    private val metadata: Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> = mapOf(
      _Fields.CODE to CODE_FIELD_META_DATA,
      _Fields.INFO to INFO_FIELD_META_DATA,
    )
    init {
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimError::class.java, metadata)
    }
  }

  private object TimErrorStandardScheme : org.apache.thrift.scheme.StandardScheme<TimError>() {
    override fun read(iproto: org.apache.thrift.protocol.TProtocol, struct: TimError) {
      iproto.apply {
        readStruct {
          var stopped = false
          while (!stopped) {
            stopped = readField {
              val skipNext = { org.apache.thrift.protocol.TProtocolUtil.skip(iproto, it.type) }
              when (it.id.toInt()) {
                1 -> {
                  if (it.type == org.apache.thrift.protocol.TType.I32) {
                    struct.code = readI32()
                  } else {
                    skipNext()
                  }
                }
                2 -> {
                  if (it.type == org.apache.thrift.protocol.TType.STRING) {
                    struct.info = readString()
                  } else {
                    skipNext()
                  }
                }
                else -> skipNext()
              }
            }
          }
          struct.validate()
        }
      }
    }

    override fun write(oproto: org.apache.thrift.protocol.TProtocol, struct: TimError) {
      struct.validate()
      oproto.apply {
        writeStruct(STRUCT_DESC) {
          struct.code?.let { code ->
            writeField(CODE_FIELD_DESC) {
              writeI32(code)
            }
          }
          struct.info?.let { info ->
            writeField(INFO_FIELD_DESC) {
              writeString(info)
            }
          }
          writeFieldStop()
        }
      }
    }

  }

  override fun compareTo(other: TimError?): kotlin.Int {
    val comparator = compareBy<TimError> { it::class.java.name }
      .thenBy { it.code } 
      .thenBy { it.info } 
    return nullsFirst(comparator).compare(this, other)
  }

  override fun fieldForId(fieldId: kotlin.Int): _Fields {
    return _Fields.findByValue(fieldId) ?: throw kotlin.IllegalArgumentException("invalid fieldId $fieldId")
  }

  override fun getFieldValue(field: _Fields): kotlin.Any? {
    return when (field) {
      _Fields.CODE -> this.code
      _Fields.INFO -> this.info
    }
  }

  @Suppress("UNCHECKED_CAST")
  override fun setFieldValue(field: _Fields, value: kotlin.Any?): kotlin.Unit {
    when (field) {
      _Fields.CODE -> this.code = value as kotlin.Int?
      _Fields.INFO -> this.info = value as kotlin.String?
    }
  }

  override fun isSet(field: _Fields): kotlin.Boolean {
    return when (field) {
      _Fields.CODE -> this.code != null
      _Fields.INFO -> this.info != null
    }
  }

  override fun deepCopy(): TimError {
    return TimError (
      code,
      info,
    )
  }

  override fun clear(): kotlin.Unit {
    code = null
    info = null
  }

  @kotlin.jvm.Throws(org.apache.thrift.TException::class)
  fun validate(): kotlin.Unit {
  }

  override fun read(iproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == iproto.scheme) { "only standard scheme is supported for now" }
    TimErrorStandardScheme.read(iproto, this)
  }

  override fun write(oproto: org.apache.thrift.protocol.TProtocol): kotlin.Unit {
    require(org.apache.thrift.scheme.StandardScheme::class.java == oproto.scheme) { "only standard scheme is supported for now" }
    TimErrorStandardScheme.write(oproto, this)
  }

}
