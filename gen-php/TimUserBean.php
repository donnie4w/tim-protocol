<?php
/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimUserBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'nickName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'brithday',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'gender',
            'isRequired' => false,
            'type' => TType::BYTE,
        ),
        6 => array(
            'var' => 'cover',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'area',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'createtime',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        9 => array(
            'var' => 'photoTidAlbum',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        10 => array(
            'var' => 'extend',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        11 => array(
            'var' => 'extra',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $nickName = null;
    /**
     * @var string
     */
    public $brithday = null;
    /**
     * @var int
     */
    public $gender = null;
    /**
     * @var string
     */
    public $cover = null;
    /**
     * @var string
     */
    public $area = null;
    /**
     * @var int
     */
    public $createtime = null;
    /**
     * @var string[]
     */
    public $photoTidAlbum = null;
    /**
     * @var array
     */
    public $extend = null;
    /**
     * @var array
     */
    public $extra = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['nickName'])) {
                $this->nickName = $vals['nickName'];
            }
            if (isset($vals['brithday'])) {
                $this->brithday = $vals['brithday'];
            }
            if (isset($vals['gender'])) {
                $this->gender = $vals['gender'];
            }
            if (isset($vals['cover'])) {
                $this->cover = $vals['cover'];
            }
            if (isset($vals['area'])) {
                $this->area = $vals['area'];
            }
            if (isset($vals['createtime'])) {
                $this->createtime = $vals['createtime'];
            }
            if (isset($vals['photoTidAlbum'])) {
                $this->photoTidAlbum = $vals['photoTidAlbum'];
            }
            if (isset($vals['extend'])) {
                $this->extend = $vals['extend'];
            }
            if (isset($vals['extra'])) {
                $this->extra = $vals['extra'];
            }
        }
    }

    public function getName()
    {
        return 'TimUserBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->nickName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->brithday);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->gender);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->cover);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->area);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->createtime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->photoTidAlbum = array();
                        $_size9 = 0;
                        $_etype12 = 0;
                        $xfer += $input->readListBegin($_etype12, $_size9);
                        for ($_i13 = 0; $_i13 < $_size9; ++$_i13) {
                            $elem14 = null;
                            $xfer += $input->readString($elem14);
                            $this->photoTidAlbum []= $elem14;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->extend = array();
                        $_size15 = 0;
                        $_ktype16 = 0;
                        $_vtype17 = 0;
                        $xfer += $input->readMapBegin($_ktype16, $_vtype17, $_size15);
                        for ($_i19 = 0; $_i19 < $_size15; ++$_i19) {
                            $key20 = '';
                            $val21 = '';
                            $xfer += $input->readString($key20);
                            $xfer += $input->readString($val21);
                            $this->extend[$key20] = $val21;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::MAP) {
                        $this->extra = array();
                        $_size22 = 0;
                        $_ktype23 = 0;
                        $_vtype24 = 0;
                        $xfer += $input->readMapBegin($_ktype23, $_vtype24, $_size22);
                        for ($_i26 = 0; $_i26 < $_size22; ++$_i26) {
                            $key27 = '';
                            $val28 = '';
                            $xfer += $input->readString($key27);
                            $xfer += $input->readString($val28);
                            $this->extra[$key27] = $val28;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimUserBean');
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->nickName !== null) {
            $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
            $xfer += $output->writeString($this->nickName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->brithday !== null) {
            $xfer += $output->writeFieldBegin('brithday', TType::STRING, 4);
            $xfer += $output->writeString($this->brithday);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gender !== null) {
            $xfer += $output->writeFieldBegin('gender', TType::BYTE, 5);
            $xfer += $output->writeByte($this->gender);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->cover !== null) {
            $xfer += $output->writeFieldBegin('cover', TType::STRING, 6);
            $xfer += $output->writeString($this->cover);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->area !== null) {
            $xfer += $output->writeFieldBegin('area', TType::STRING, 7);
            $xfer += $output->writeString($this->area);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createtime !== null) {
            $xfer += $output->writeFieldBegin('createtime', TType::I64, 8);
            $xfer += $output->writeI64($this->createtime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->photoTidAlbum !== null) {
            if (!is_array($this->photoTidAlbum)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('photoTidAlbum', TType::LST, 9);
            $output->writeListBegin(TType::STRING, count($this->photoTidAlbum));
            foreach ($this->photoTidAlbum as $iter29) {
                $xfer += $output->writeString($iter29);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extend !== null) {
            if (!is_array($this->extend)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extend', TType::MAP, 10);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extend));
            foreach ($this->extend as $kiter30 => $viter31) {
                $xfer += $output->writeString($kiter30);
                $xfer += $output->writeString($viter31);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extra !== null) {
            if (!is_array($this->extra)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extra', TType::MAP, 11);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extra));
            foreach ($this->extra as $kiter32 => $viter33) {
                $xfer += $output->writeString($kiter32);
                $xfer += $output->writeString($viter33);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
