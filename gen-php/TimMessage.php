<?php
/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimMessage
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'msType',
            'isRequired' => true,
            'type' => TType::BYTE,
        ),
        2 => array(
            'var' => 'odType',
            'isRequired' => true,
            'type' => TType::BYTE,
        ),
        3 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'bnType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        6 => array(
            'var' => 'fromTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        7 => array(
            'var' => 'toTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        8 => array(
            'var' => 'roomTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        9 => array(
            'var' => 'dataBinary',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'dataString',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'isOffline',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        12 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        13 => array(
            'var' => 'udtype',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        14 => array(
            'var' => 'udshow',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        15 => array(
            'var' => 'extend',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        16 => array(
            'var' => 'extra',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $msType = null;
    /**
     * @var int
     */
    public $odType = null;
    /**
     * @var int
     */
    public $id = null;
    /**
     * @var int
     */
    public $mid = null;
    /**
     * @var int
     */
    public $bnType = null;
    /**
     * @var \Tid
     */
    public $fromTid = null;
    /**
     * @var \Tid
     */
    public $toTid = null;
    /**
     * @var \Tid
     */
    public $roomTid = null;
    /**
     * @var string
     */
    public $dataBinary = null;
    /**
     * @var string
     */
    public $dataString = null;
    /**
     * @var bool
     */
    public $isOffline = null;
    /**
     * @var int
     */
    public $timestamp = null;
    /**
     * @var int
     */
    public $udtype = null;
    /**
     * @var int
     */
    public $udshow = null;
    /**
     * @var array
     */
    public $extend = null;
    /**
     * @var array
     */
    public $extra = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['msType'])) {
                $this->msType = $vals['msType'];
            }
            if (isset($vals['odType'])) {
                $this->odType = $vals['odType'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['bnType'])) {
                $this->bnType = $vals['bnType'];
            }
            if (isset($vals['fromTid'])) {
                $this->fromTid = $vals['fromTid'];
            }
            if (isset($vals['toTid'])) {
                $this->toTid = $vals['toTid'];
            }
            if (isset($vals['roomTid'])) {
                $this->roomTid = $vals['roomTid'];
            }
            if (isset($vals['dataBinary'])) {
                $this->dataBinary = $vals['dataBinary'];
            }
            if (isset($vals['dataString'])) {
                $this->dataString = $vals['dataString'];
            }
            if (isset($vals['isOffline'])) {
                $this->isOffline = $vals['isOffline'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['udtype'])) {
                $this->udtype = $vals['udtype'];
            }
            if (isset($vals['udshow'])) {
                $this->udshow = $vals['udshow'];
            }
            if (isset($vals['extend'])) {
                $this->extend = $vals['extend'];
            }
            if (isset($vals['extra'])) {
                $this->extra = $vals['extra'];
            }
        }
    }

    public function getName()
    {
        return 'TimMessage';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->msType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->odType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->bnType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->fromTid = new \Tid();
                        $xfer += $this->fromTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->toTid = new \Tid();
                        $xfer += $this->toTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->roomTid = new \Tid();
                        $xfer += $this->roomTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dataBinary);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->dataString);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isOffline);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->udtype);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->udshow);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::MAP) {
                        $this->extend = array();
                        $_size93 = 0;
                        $_ktype94 = 0;
                        $_vtype95 = 0;
                        $xfer += $input->readMapBegin($_ktype94, $_vtype95, $_size93);
                        for ($_i97 = 0; $_i97 < $_size93; ++$_i97) {
                            $key98 = '';
                            $val99 = '';
                            $xfer += $input->readString($key98);
                            $xfer += $input->readString($val99);
                            $this->extend[$key98] = $val99;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::MAP) {
                        $this->extra = array();
                        $_size100 = 0;
                        $_ktype101 = 0;
                        $_vtype102 = 0;
                        $xfer += $input->readMapBegin($_ktype101, $_vtype102, $_size100);
                        for ($_i104 = 0; $_i104 < $_size100; ++$_i104) {
                            $key105 = '';
                            $val106 = '';
                            $xfer += $input->readString($key105);
                            $xfer += $input->readString($val106);
                            $this->extra[$key105] = $val106;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimMessage');
        if ($this->msType !== null) {
            $xfer += $output->writeFieldBegin('msType', TType::BYTE, 1);
            $xfer += $output->writeByte($this->msType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->odType !== null) {
            $xfer += $output->writeFieldBegin('odType', TType::BYTE, 2);
            $xfer += $output->writeByte($this->odType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::I64, 3);
            $xfer += $output->writeI64($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::I64, 4);
            $xfer += $output->writeI64($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->bnType !== null) {
            $xfer += $output->writeFieldBegin('bnType', TType::I32, 5);
            $xfer += $output->writeI32($this->bnType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fromTid !== null) {
            if (!is_object($this->fromTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 6);
            $xfer += $this->fromTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toTid !== null) {
            if (!is_object($this->toTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 7);
            $xfer += $this->toTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->roomTid !== null) {
            if (!is_object($this->roomTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('roomTid', TType::STRUCT, 8);
            $xfer += $this->roomTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataBinary !== null) {
            $xfer += $output->writeFieldBegin('dataBinary', TType::STRING, 9);
            $xfer += $output->writeString($this->dataBinary);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->dataString !== null) {
            $xfer += $output->writeFieldBegin('dataString', TType::STRING, 10);
            $xfer += $output->writeString($this->dataString);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->isOffline !== null) {
            $xfer += $output->writeFieldBegin('isOffline', TType::BOOL, 11);
            $xfer += $output->writeBool($this->isOffline);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::I64, 12);
            $xfer += $output->writeI64($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->udtype !== null) {
            $xfer += $output->writeFieldBegin('udtype', TType::I16, 13);
            $xfer += $output->writeI16($this->udtype);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->udshow !== null) {
            $xfer += $output->writeFieldBegin('udshow', TType::I16, 14);
            $xfer += $output->writeI16($this->udshow);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extend !== null) {
            if (!is_array($this->extend)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extend', TType::MAP, 15);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extend));
            foreach ($this->extend as $kiter107 => $viter108) {
                $xfer += $output->writeString($kiter107);
                $xfer += $output->writeString($viter108);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extra !== null) {
            if (!is_array($this->extra)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extra', TType::MAP, 16);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extra));
            foreach ($this->extra as $kiter109 => $viter110) {
                $xfer += $output->writeString($kiter109);
                $xfer += $output->writeString($viter110);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
