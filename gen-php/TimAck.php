<?php
/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimAck
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ok',
            'isRequired' => true,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'timType',
            'isRequired' => true,
            'type' => TType::BYTE,
        ),
        3 => array(
            'var' => 'error',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimError',
        ),
        4 => array(
            'var' => 't',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        5 => array(
            'var' => 'n',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var bool
     */
    public $ok = null;
    /**
     * @var int
     */
    public $timType = null;
    /**
     * @var \TimError
     */
    public $error = null;
    /**
     * @var int
     */
    public $t = null;
    /**
     * @var string
     */
    public $n = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ok'])) {
                $this->ok = $vals['ok'];
            }
            if (isset($vals['timType'])) {
                $this->timType = $vals['timType'];
            }
            if (isset($vals['error'])) {
                $this->error = $vals['error'];
            }
            if (isset($vals['t'])) {
                $this->t = $vals['t'];
            }
            if (isset($vals['n'])) {
                $this->n = $vals['n'];
            }
        }
    }

    public function getName()
    {
        return 'TimAck';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->ok);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->timType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->error = new \TimError();
                        $xfer += $this->error->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->t);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->n);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimAck');
        if ($this->ok !== null) {
            $xfer += $output->writeFieldBegin('ok', TType::BOOL, 1);
            $xfer += $output->writeBool($this->ok);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timType !== null) {
            $xfer += $output->writeFieldBegin('timType', TType::BYTE, 2);
            $xfer += $output->writeByte($this->timType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error !== null) {
            if (!is_object($this->error)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
            $xfer += $this->error->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->t !== null) {
            $xfer += $output->writeFieldBegin('t', TType::I64, 4);
            $xfer += $output->writeI64($this->t);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->n !== null) {
            $xfer += $output->writeFieldBegin('n', TType::STRING, 5);
            $xfer += $output->writeString($this->n);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
