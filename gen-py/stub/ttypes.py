#
# Autogenerated by Thrift Compiler (0.18.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TimError(object):
    """
    Attributes:
     - code
     - info

    """


    def __init__(self, code=None, info=None,):
        self.code = code
        self.info = info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.info = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimError')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRING, 2)
            oprot.writeString(self.info.encode('utf-8') if sys.version_info[0] == 2 else self.info)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimAck(object):
    """
    Attributes:
     - ok
     - timType
     - error
     - t
     - n

    """


    def __init__(self, ok=None, timType=None, error=None, t=None, n=None,):
        self.ok = ok
        self.timType = timType
        self.error = error
        self.t = t
        self.n = n

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.ok = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.timType = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.error = TimError()
                    self.error.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.t = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.n = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimAck')
        if self.ok is not None:
            oprot.writeFieldBegin('ok', TType.BOOL, 1)
            oprot.writeBool(self.ok)
            oprot.writeFieldEnd()
        if self.timType is not None:
            oprot.writeFieldBegin('timType', TType.BYTE, 2)
            oprot.writeByte(self.timType)
            oprot.writeFieldEnd()
        if self.error is not None:
            oprot.writeFieldBegin('error', TType.STRUCT, 3)
            self.error.write(oprot)
            oprot.writeFieldEnd()
        if self.t is not None:
            oprot.writeFieldBegin('t', TType.I64, 4)
            oprot.writeI64(self.t)
            oprot.writeFieldEnd()
        if self.n is not None:
            oprot.writeFieldBegin('n', TType.STRING, 5)
            oprot.writeString(self.n.encode('utf-8') if sys.version_info[0] == 2 else self.n)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ok is None:
            raise TProtocolException(message='Required field ok is unset!')
        if self.timType is None:
            raise TProtocolException(message='Required field timType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimReq(object):
    """
    Attributes:
     - rtype
     - node
     - node2
     - reqInt
     - reqInt2
     - reqStr
     - reqStr2

    """


    def __init__(self, rtype=None, node=None, node2=None, reqInt=None, reqInt2=None, reqStr=None, reqStr2=None,):
        self.rtype = rtype
        self.node = node
        self.node2 = node2
        self.reqInt = reqInt
        self.reqInt2 = reqInt2
        self.reqStr = reqStr
        self.reqStr2 = reqStr2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.rtype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.node = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.node2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.reqInt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.reqInt2 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.reqStr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.reqStr2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimReq')
        if self.rtype is not None:
            oprot.writeFieldBegin('rtype', TType.I32, 1)
            oprot.writeI32(self.rtype)
            oprot.writeFieldEnd()
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRING, 2)
            oprot.writeString(self.node.encode('utf-8') if sys.version_info[0] == 2 else self.node)
            oprot.writeFieldEnd()
        if self.node2 is not None:
            oprot.writeFieldBegin('node2', TType.STRING, 3)
            oprot.writeString(self.node2.encode('utf-8') if sys.version_info[0] == 2 else self.node2)
            oprot.writeFieldEnd()
        if self.reqInt is not None:
            oprot.writeFieldBegin('reqInt', TType.I64, 4)
            oprot.writeI64(self.reqInt)
            oprot.writeFieldEnd()
        if self.reqInt2 is not None:
            oprot.writeFieldBegin('reqInt2', TType.I64, 5)
            oprot.writeI64(self.reqInt2)
            oprot.writeFieldEnd()
        if self.reqStr is not None:
            oprot.writeFieldBegin('reqStr', TType.STRING, 6)
            oprot.writeString(self.reqStr.encode('utf-8') if sys.version_info[0] == 2 else self.reqStr)
            oprot.writeFieldEnd()
        if self.reqStr2 is not None:
            oprot.writeFieldBegin('reqStr2', TType.STRING, 7)
            oprot.writeString(self.reqStr2.encode('utf-8') if sys.version_info[0] == 2 else self.reqStr2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Tid(object):
    """
    Attributes:
     - node
     - domain
     - resource
     - termtyp
     - extend

    """


    def __init__(self, node=None, domain=None, resource=None, termtyp=None, extend=None,):
        self.node = node
        self.domain = domain
        self.resource = resource
        self.termtyp = termtyp
        self.extend = extend

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.node = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.resource = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.termtyp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.extend = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.extend[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Tid')
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRING, 1)
            oprot.writeString(self.node.encode('utf-8') if sys.version_info[0] == 2 else self.node)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 2)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.resource is not None:
            oprot.writeFieldBegin('resource', TType.STRING, 3)
            oprot.writeString(self.resource.encode('utf-8') if sys.version_info[0] == 2 else self.resource)
            oprot.writeFieldEnd()
        if self.termtyp is not None:
            oprot.writeFieldBegin('termtyp', TType.BYTE, 4)
            oprot.writeByte(self.termtyp)
            oprot.writeFieldEnd()
        if self.extend is not None:
            oprot.writeFieldBegin('extend', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
            for kiter7, viter8 in self.extend.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.node is None:
            raise TProtocolException(message='Required field node is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimUserBean(object):
    """
    Attributes:
     - name
     - nickName
     - brithday
     - gender
     - cover
     - area
     - createtime
     - photoTidAlbum
     - extend
     - extra

    """


    def __init__(self, name=None, nickName=None, brithday=None, gender=None, cover=None, area=None, createtime=None, photoTidAlbum=None, extend=None, extra=None,):
        self.name = name
        self.nickName = nickName
        self.brithday = brithday
        self.gender = gender
        self.cover = cover
        self.area = area
        self.createtime = createtime
        self.photoTidAlbum = photoTidAlbum
        self.extend = extend
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nickName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.brithday = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.gender = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cover = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.area = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.createtime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.photoTidAlbum = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.photoTidAlbum.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.extend = {}
                    (_ktype16, _vtype17, _size15) = iprot.readMapBegin()
                    for _i19 in range(_size15):
                        _key20 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val21 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.extend[_key20] = _val21
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_ktype23, _vtype24, _size22) = iprot.readMapBegin()
                    for _i26 in range(_size22):
                        _key27 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val28 = iprot.readBinary()
                        self.extra[_key27] = _val28
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimUserBean')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.nickName is not None:
            oprot.writeFieldBegin('nickName', TType.STRING, 2)
            oprot.writeString(self.nickName.encode('utf-8') if sys.version_info[0] == 2 else self.nickName)
            oprot.writeFieldEnd()
        if self.brithday is not None:
            oprot.writeFieldBegin('brithday', TType.STRING, 4)
            oprot.writeString(self.brithday.encode('utf-8') if sys.version_info[0] == 2 else self.brithday)
            oprot.writeFieldEnd()
        if self.gender is not None:
            oprot.writeFieldBegin('gender', TType.BYTE, 5)
            oprot.writeByte(self.gender)
            oprot.writeFieldEnd()
        if self.cover is not None:
            oprot.writeFieldBegin('cover', TType.STRING, 6)
            oprot.writeString(self.cover.encode('utf-8') if sys.version_info[0] == 2 else self.cover)
            oprot.writeFieldEnd()
        if self.area is not None:
            oprot.writeFieldBegin('area', TType.STRING, 7)
            oprot.writeString(self.area.encode('utf-8') if sys.version_info[0] == 2 else self.area)
            oprot.writeFieldEnd()
        if self.createtime is not None:
            oprot.writeFieldBegin('createtime', TType.I64, 8)
            oprot.writeI64(self.createtime)
            oprot.writeFieldEnd()
        if self.photoTidAlbum is not None:
            oprot.writeFieldBegin('photoTidAlbum', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.photoTidAlbum))
            for iter29 in self.photoTidAlbum:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.extend is not None:
            oprot.writeFieldBegin('extend', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
            for kiter30, viter31 in self.extend.items():
                oprot.writeString(kiter30.encode('utf-8') if sys.version_info[0] == 2 else kiter30)
                oprot.writeString(viter31.encode('utf-8') if sys.version_info[0] == 2 else viter31)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for kiter32, viter33 in self.extra.items():
                oprot.writeString(kiter32.encode('utf-8') if sys.version_info[0] == 2 else kiter32)
                oprot.writeBinary(viter33)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimRoomBean(object):
    """
    Attributes:
     - founder
     - managers
     - cover
     - topic
     - label
     - gtype
     - createtime
     - extend
     - extra

    """


    def __init__(self, founder=None, managers=None, cover=None, topic=None, label=None, gtype=None, createtime=None, extend=None, extra=None,):
        self.founder = founder
        self.managers = managers
        self.cover = cover
        self.topic = topic
        self.label = label
        self.gtype = gtype
        self.createtime = createtime
        self.extend = extend
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.founder = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.managers = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.managers.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cover = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.topic = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.gtype = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.createtime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.extend = {}
                    (_ktype41, _vtype42, _size40) = iprot.readMapBegin()
                    for _i44 in range(_size40):
                        _key45 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val46 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.extend[_key45] = _val46
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_ktype48, _vtype49, _size47) = iprot.readMapBegin()
                    for _i51 in range(_size47):
                        _key52 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val53 = iprot.readBinary()
                        self.extra[_key52] = _val53
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimRoomBean')
        if self.founder is not None:
            oprot.writeFieldBegin('founder', TType.STRING, 1)
            oprot.writeString(self.founder.encode('utf-8') if sys.version_info[0] == 2 else self.founder)
            oprot.writeFieldEnd()
        if self.managers is not None:
            oprot.writeFieldBegin('managers', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.managers))
            for iter54 in self.managers:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cover is not None:
            oprot.writeFieldBegin('cover', TType.STRING, 3)
            oprot.writeString(self.cover.encode('utf-8') if sys.version_info[0] == 2 else self.cover)
            oprot.writeFieldEnd()
        if self.topic is not None:
            oprot.writeFieldBegin('topic', TType.STRING, 4)
            oprot.writeString(self.topic.encode('utf-8') if sys.version_info[0] == 2 else self.topic)
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 5)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.gtype is not None:
            oprot.writeFieldBegin('gtype', TType.BYTE, 6)
            oprot.writeByte(self.gtype)
            oprot.writeFieldEnd()
        if self.createtime is not None:
            oprot.writeFieldBegin('createtime', TType.I64, 7)
            oprot.writeI64(self.createtime)
            oprot.writeFieldEnd()
        if self.extend is not None:
            oprot.writeFieldBegin('extend', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
            for kiter55, viter56 in self.extend.items():
                oprot.writeString(kiter55.encode('utf-8') if sys.version_info[0] == 2 else kiter55)
                oprot.writeString(viter56.encode('utf-8') if sys.version_info[0] == 2 else viter56)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for kiter57, viter58 in self.extra.items():
                oprot.writeString(kiter57.encode('utf-8') if sys.version_info[0] == 2 else kiter57)
                oprot.writeBinary(viter58)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimAuth(object):
    """
    Attributes:
     - name
     - pwd
     - domain
     - resource
     - termtyp
     - token
     - extend

    """


    def __init__(self, name=None, pwd=None, domain=None, resource=None, termtyp=None, token=None, extend=None,):
        self.name = name
        self.pwd = pwd
        self.domain = domain
        self.resource = resource
        self.termtyp = termtyp
        self.token = token
        self.extend = extend

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pwd = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.resource = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.termtyp = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.token = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.extend = {}
                    (_ktype60, _vtype61, _size59) = iprot.readMapBegin()
                    for _i63 in range(_size59):
                        _key64 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val65 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.extend[_key64] = _val65
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimAuth')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.pwd is not None:
            oprot.writeFieldBegin('pwd', TType.STRING, 2)
            oprot.writeString(self.pwd.encode('utf-8') if sys.version_info[0] == 2 else self.pwd)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 3)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.resource is not None:
            oprot.writeFieldBegin('resource', TType.STRING, 4)
            oprot.writeString(self.resource.encode('utf-8') if sys.version_info[0] == 2 else self.resource)
            oprot.writeFieldEnd()
        if self.termtyp is not None:
            oprot.writeFieldBegin('termtyp', TType.BYTE, 5)
            oprot.writeByte(self.termtyp)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.I64, 6)
            oprot.writeI64(self.token)
            oprot.writeFieldEnd()
        if self.extend is not None:
            oprot.writeFieldBegin('extend', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
            for kiter66, viter67 in self.extend.items():
                oprot.writeString(kiter66.encode('utf-8') if sys.version_info[0] == 2 else kiter66)
                oprot.writeString(viter67.encode('utf-8') if sys.version_info[0] == 2 else viter67)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimPresence(object):
    """
    Attributes:
     - id
     - offline
     - subStatus
     - fromTid
     - toTid
     - toList
     - show
     - status
     - extend
     - extra

    """


    def __init__(self, id=None, offline=None, subStatus=None, fromTid=None, toTid=None, toList=None, show=None, status=None, extend=None, extra=None,):
        self.id = id
        self.offline = offline
        self.subStatus = subStatus
        self.fromTid = fromTid
        self.toTid = toTid
        self.toList = toList
        self.show = show
        self.status = status
        self.extend = extend
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.offline = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.subStatus = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.fromTid = Tid()
                    self.fromTid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.toTid = Tid()
                    self.toTid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.toList = []
                    (_etype71, _size68) = iprot.readListBegin()
                    for _i72 in range(_size68):
                        _elem73 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.toList.append(_elem73)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I16:
                    self.show = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.extend = {}
                    (_ktype75, _vtype76, _size74) = iprot.readMapBegin()
                    for _i78 in range(_size74):
                        _key79 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val80 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.extend[_key79] = _val80
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_ktype82, _vtype83, _size81) = iprot.readMapBegin()
                    for _i85 in range(_size81):
                        _key86 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val87 = iprot.readBinary()
                        self.extra[_key86] = _val87
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimPresence')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.offline is not None:
            oprot.writeFieldBegin('offline', TType.BOOL, 2)
            oprot.writeBool(self.offline)
            oprot.writeFieldEnd()
        if self.subStatus is not None:
            oprot.writeFieldBegin('subStatus', TType.BYTE, 3)
            oprot.writeByte(self.subStatus)
            oprot.writeFieldEnd()
        if self.fromTid is not None:
            oprot.writeFieldBegin('fromTid', TType.STRUCT, 4)
            self.fromTid.write(oprot)
            oprot.writeFieldEnd()
        if self.toTid is not None:
            oprot.writeFieldBegin('toTid', TType.STRUCT, 5)
            self.toTid.write(oprot)
            oprot.writeFieldEnd()
        if self.toList is not None:
            oprot.writeFieldBegin('toList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.toList))
            for iter88 in self.toList:
                oprot.writeString(iter88.encode('utf-8') if sys.version_info[0] == 2 else iter88)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.show is not None:
            oprot.writeFieldBegin('show', TType.I16, 7)
            oprot.writeI16(self.show)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 8)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.extend is not None:
            oprot.writeFieldBegin('extend', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
            for kiter89, viter90 in self.extend.items():
                oprot.writeString(kiter89.encode('utf-8') if sys.version_info[0] == 2 else kiter89)
                oprot.writeString(viter90.encode('utf-8') if sys.version_info[0] == 2 else viter90)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for kiter91, viter92 in self.extra.items():
                oprot.writeString(kiter91.encode('utf-8') if sys.version_info[0] == 2 else kiter91)
                oprot.writeBinary(viter92)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimMessage(object):
    """
    Attributes:
     - msType
     - odType
     - id
     - mid
     - bnType
     - fromTid
     - toTid
     - roomTid
     - dataBinary
     - dataString
     - isOffline
     - timestamp
     - udtype
     - udshow
     - extend
     - extra

    """


    def __init__(self, msType=None, odType=None, id=None, mid=None, bnType=None, fromTid=None, toTid=None, roomTid=None, dataBinary=None, dataString=None, isOffline=None, timestamp=None, udtype=None, udshow=None, extend=None, extra=None,):
        self.msType = msType
        self.odType = odType
        self.id = id
        self.mid = mid
        self.bnType = bnType
        self.fromTid = fromTid
        self.toTid = toTid
        self.roomTid = roomTid
        self.dataBinary = dataBinary
        self.dataString = dataString
        self.isOffline = isOffline
        self.timestamp = timestamp
        self.udtype = udtype
        self.udshow = udshow
        self.extend = extend
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.msType = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.odType = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.mid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.bnType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.fromTid = Tid()
                    self.fromTid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.toTid = Tid()
                    self.toTid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.roomTid = Tid()
                    self.roomTid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.dataBinary = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.dataString = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.isOffline = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I16:
                    self.udtype = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I16:
                    self.udshow = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.MAP:
                    self.extend = {}
                    (_ktype94, _vtype95, _size93) = iprot.readMapBegin()
                    for _i97 in range(_size93):
                        _key98 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val99 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.extend[_key98] = _val99
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.MAP:
                    self.extra = {}
                    (_ktype101, _vtype102, _size100) = iprot.readMapBegin()
                    for _i104 in range(_size100):
                        _key105 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val106 = iprot.readBinary()
                        self.extra[_key105] = _val106
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimMessage')
        if self.msType is not None:
            oprot.writeFieldBegin('msType', TType.BYTE, 1)
            oprot.writeByte(self.msType)
            oprot.writeFieldEnd()
        if self.odType is not None:
            oprot.writeFieldBegin('odType', TType.BYTE, 2)
            oprot.writeByte(self.odType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 3)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.I64, 4)
            oprot.writeI64(self.mid)
            oprot.writeFieldEnd()
        if self.bnType is not None:
            oprot.writeFieldBegin('bnType', TType.I32, 5)
            oprot.writeI32(self.bnType)
            oprot.writeFieldEnd()
        if self.fromTid is not None:
            oprot.writeFieldBegin('fromTid', TType.STRUCT, 6)
            self.fromTid.write(oprot)
            oprot.writeFieldEnd()
        if self.toTid is not None:
            oprot.writeFieldBegin('toTid', TType.STRUCT, 7)
            self.toTid.write(oprot)
            oprot.writeFieldEnd()
        if self.roomTid is not None:
            oprot.writeFieldBegin('roomTid', TType.STRUCT, 8)
            self.roomTid.write(oprot)
            oprot.writeFieldEnd()
        if self.dataBinary is not None:
            oprot.writeFieldBegin('dataBinary', TType.STRING, 9)
            oprot.writeBinary(self.dataBinary)
            oprot.writeFieldEnd()
        if self.dataString is not None:
            oprot.writeFieldBegin('dataString', TType.STRING, 10)
            oprot.writeString(self.dataString.encode('utf-8') if sys.version_info[0] == 2 else self.dataString)
            oprot.writeFieldEnd()
        if self.isOffline is not None:
            oprot.writeFieldBegin('isOffline', TType.BOOL, 11)
            oprot.writeBool(self.isOffline)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 12)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.udtype is not None:
            oprot.writeFieldBegin('udtype', TType.I16, 13)
            oprot.writeI16(self.udtype)
            oprot.writeFieldEnd()
        if self.udshow is not None:
            oprot.writeFieldBegin('udshow', TType.I16, 14)
            oprot.writeI16(self.udshow)
            oprot.writeFieldEnd()
        if self.extend is not None:
            oprot.writeFieldBegin('extend', TType.MAP, 15)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
            for kiter107, viter108 in self.extend.items():
                oprot.writeString(kiter107.encode('utf-8') if sys.version_info[0] == 2 else kiter107)
                oprot.writeString(viter108.encode('utf-8') if sys.version_info[0] == 2 else viter108)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.MAP, 16)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extra))
            for kiter109, viter110 in self.extra.items():
                oprot.writeString(kiter109.encode('utf-8') if sys.version_info[0] == 2 else kiter109)
                oprot.writeBinary(viter110)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.msType is None:
            raise TProtocolException(message='Required field msType is unset!')
        if self.odType is None:
            raise TProtocolException(message='Required field odType is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimStream(object):
    """
    Attributes:
     - id
     - VNode
     - dtype
     - body
     - fromNode

    """


    def __init__(self, id=None, VNode=None, dtype=None, body=None, fromNode=None,):
        self.id = id
        self.VNode = VNode
        self.dtype = dtype
        self.body = body
        self.fromNode = fromNode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.VNode = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.dtype = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.body = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fromNode = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimStream')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.VNode is not None:
            oprot.writeFieldBegin('VNode', TType.STRING, 2)
            oprot.writeString(self.VNode.encode('utf-8') if sys.version_info[0] == 2 else self.VNode)
            oprot.writeFieldEnd()
        if self.dtype is not None:
            oprot.writeFieldBegin('dtype', TType.BYTE, 3)
            oprot.writeByte(self.dtype)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 4)
            oprot.writeBinary(self.body)
            oprot.writeFieldEnd()
        if self.fromNode is not None:
            oprot.writeFieldBegin('fromNode', TType.STRING, 5)
            oprot.writeString(self.fromNode.encode('utf-8') if sys.version_info[0] == 2 else self.fromNode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.VNode is None:
            raise TProtocolException(message='Required field VNode is unset!')
        if self.fromNode is None:
            raise TProtocolException(message='Required field fromNode is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimNodes(object):
    """
    Attributes:
     - ntype
     - nodelist
     - usermap
     - roommap
     - node

    """


    def __init__(self, ntype=None, nodelist=None, usermap=None, roommap=None, node=None,):
        self.ntype = ntype
        self.nodelist = nodelist
        self.usermap = usermap
        self.roommap = roommap
        self.node = node

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ntype = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nodelist = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.nodelist.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.usermap = {}
                    (_ktype118, _vtype119, _size117) = iprot.readMapBegin()
                    for _i121 in range(_size117):
                        _key122 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val123 = TimUserBean()
                        _val123.read(iprot)
                        self.usermap[_key122] = _val123
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.roommap = {}
                    (_ktype125, _vtype126, _size124) = iprot.readMapBegin()
                    for _i128 in range(_size124):
                        _key129 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val130 = TimRoomBean()
                        _val130.read(iprot)
                        self.roommap[_key129] = _val130
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.node = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimNodes')
        if self.ntype is not None:
            oprot.writeFieldBegin('ntype', TType.I32, 1)
            oprot.writeI32(self.ntype)
            oprot.writeFieldEnd()
        if self.nodelist is not None:
            oprot.writeFieldBegin('nodelist', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.nodelist))
            for iter131 in self.nodelist:
                oprot.writeString(iter131.encode('utf-8') if sys.version_info[0] == 2 else iter131)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.usermap is not None:
            oprot.writeFieldBegin('usermap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.usermap))
            for kiter132, viter133 in self.usermap.items():
                oprot.writeString(kiter132.encode('utf-8') if sys.version_info[0] == 2 else kiter132)
                viter133.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.roommap is not None:
            oprot.writeFieldBegin('roommap', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.roommap))
            for kiter134, viter135 in self.roommap.items():
                oprot.writeString(kiter134.encode('utf-8') if sys.version_info[0] == 2 else kiter134)
                viter135.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.node is not None:
            oprot.writeFieldBegin('node', TType.STRING, 5)
            oprot.writeString(self.node.encode('utf-8') if sys.version_info[0] == 2 else self.node)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ntype is None:
            raise TProtocolException(message='Required field ntype is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimMessageList(object):
    """
    Attributes:
     - id
     - messageList

    """


    def __init__(self, id=None, messageList=None,):
        self.id = id
        self.messageList = messageList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.messageList = []
                    (_etype139, _size136) = iprot.readListBegin()
                    for _i140 in range(_size136):
                        _elem141 = TimMessage()
                        _elem141.read(iprot)
                        self.messageList.append(_elem141)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TimMessageList')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.messageList is not None:
            oprot.writeFieldBegin('messageList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.messageList))
            for iter142 in self.messageList:
                iter142.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TimError)
TimError.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'info', 'UTF8', None, ),  # 2
)
all_structs.append(TimAck)
TimAck.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'ok', None, None, ),  # 1
    (2, TType.BYTE, 'timType', None, None, ),  # 2
    (3, TType.STRUCT, 'error', [TimError, None], None, ),  # 3
    (4, TType.I64, 't', None, None, ),  # 4
    (5, TType.STRING, 'n', 'UTF8', None, ),  # 5
)
all_structs.append(TimReq)
TimReq.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'rtype', None, None, ),  # 1
    (2, TType.STRING, 'node', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'node2', 'UTF8', None, ),  # 3
    (4, TType.I64, 'reqInt', None, None, ),  # 4
    (5, TType.I64, 'reqInt2', None, None, ),  # 5
    (6, TType.STRING, 'reqStr', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'reqStr2', 'UTF8', None, ),  # 7
)
all_structs.append(Tid)
Tid.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'node', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'domain', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'resource', 'UTF8', None, ),  # 3
    (4, TType.BYTE, 'termtyp', None, None, ),  # 4
    (5, TType.MAP, 'extend', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
)
all_structs.append(TimUserBean)
TimUserBean.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nickName', 'UTF8', None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'brithday', 'UTF8', None, ),  # 4
    (5, TType.BYTE, 'gender', None, None, ),  # 5
    (6, TType.STRING, 'cover', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'area', 'UTF8', None, ),  # 7
    (8, TType.I64, 'createtime', None, None, ),  # 8
    (9, TType.LIST, 'photoTidAlbum', (TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.MAP, 'extend', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 10
    (11, TType.MAP, 'extra', (TType.STRING, 'UTF8', TType.STRING, 'BINARY', False), None, ),  # 11
)
all_structs.append(TimRoomBean)
TimRoomBean.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'founder', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'managers', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'cover', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'topic', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'label', 'UTF8', None, ),  # 5
    (6, TType.BYTE, 'gtype', None, None, ),  # 6
    (7, TType.I64, 'createtime', None, None, ),  # 7
    (8, TType.MAP, 'extend', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.MAP, 'extra', (TType.STRING, 'UTF8', TType.STRING, 'BINARY', False), None, ),  # 9
)
all_structs.append(TimAuth)
TimAuth.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'pwd', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'domain', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'resource', 'UTF8', None, ),  # 4
    (5, TType.BYTE, 'termtyp', None, None, ),  # 5
    (6, TType.I64, 'token', None, None, ),  # 6
    (7, TType.MAP, 'extend', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(TimPresence)
TimPresence.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.BOOL, 'offline', None, None, ),  # 2
    (3, TType.BYTE, 'subStatus', None, None, ),  # 3
    (4, TType.STRUCT, 'fromTid', [Tid, None], None, ),  # 4
    (5, TType.STRUCT, 'toTid', [Tid, None], None, ),  # 5
    (6, TType.LIST, 'toList', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I16, 'show', None, None, ),  # 7
    (8, TType.STRING, 'status', 'UTF8', None, ),  # 8
    (9, TType.MAP, 'extend', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
    (10, TType.MAP, 'extra', (TType.STRING, 'UTF8', TType.STRING, 'BINARY', False), None, ),  # 10
)
all_structs.append(TimMessage)
TimMessage.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'msType', None, None, ),  # 1
    (2, TType.BYTE, 'odType', None, None, ),  # 2
    (3, TType.I64, 'id', None, None, ),  # 3
    (4, TType.I64, 'mid', None, None, ),  # 4
    (5, TType.I32, 'bnType', None, None, ),  # 5
    (6, TType.STRUCT, 'fromTid', [Tid, None], None, ),  # 6
    (7, TType.STRUCT, 'toTid', [Tid, None], None, ),  # 7
    (8, TType.STRUCT, 'roomTid', [Tid, None], None, ),  # 8
    (9, TType.STRING, 'dataBinary', 'BINARY', None, ),  # 9
    (10, TType.STRING, 'dataString', 'UTF8', None, ),  # 10
    (11, TType.BOOL, 'isOffline', None, None, ),  # 11
    (12, TType.I64, 'timestamp', None, None, ),  # 12
    (13, TType.I16, 'udtype', None, None, ),  # 13
    (14, TType.I16, 'udshow', None, None, ),  # 14
    (15, TType.MAP, 'extend', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 15
    (16, TType.MAP, 'extra', (TType.STRING, 'UTF8', TType.STRING, 'BINARY', False), None, ),  # 16
)
all_structs.append(TimStream)
TimStream.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'VNode', 'UTF8', None, ),  # 2
    (3, TType.BYTE, 'dtype', None, None, ),  # 3
    (4, TType.STRING, 'body', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'fromNode', 'UTF8', None, ),  # 5
)
all_structs.append(TimNodes)
TimNodes.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ntype', None, None, ),  # 1
    (2, TType.LIST, 'nodelist', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.MAP, 'usermap', (TType.STRING, 'UTF8', TType.STRUCT, [TimUserBean, None], False), None, ),  # 3
    (4, TType.MAP, 'roommap', (TType.STRING, 'UTF8', TType.STRUCT, [TimRoomBean, None], False), None, ),  # 4
    (5, TType.STRING, 'node', 'UTF8', None, ),  # 5
)
all_structs.append(TimMessageList)
TimMessageList.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.LIST, 'messageList', (TType.STRUCT, [TimMessage, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
